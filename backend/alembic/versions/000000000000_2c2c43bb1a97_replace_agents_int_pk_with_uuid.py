"""replace agents int pk with uuid
Revision ID: 2c2c43bb1a97
Revises: 455a34aa009c
Create Date: 2024-05-24 08:07:36.567377
"""

from typing import Optional

import sqlalchemy as sa
from pydantic import BaseModel

from alembic import op

# revision identifiers, used by Alembic
revision = '2c2c43bb1a97'
down_revision = '455a34aa009c'
branch_labels = None
depends_on = None

TABLE = "assistants"
COLUMN_NAME = "assistant"


class Relationship(BaseModel):
    table_name: str
    col_name: Optional[str] = None
    fk_name: Optional[str] = None
    other_pk_col: Optional[str] = None
    ondelete: str


RELATIONSHIPS = [
    Relationship(table_name="widgets", ondelete="CASCADE"),
    Relationship(
        table_name="assistants_groups",
        fk_name="agents_groups_agent_id_fkey",
        other_pk_col="group_id",
        ondelete="CASCADE",
    ),
    Relationship(
        table_name="usergroups_assistants",
        col_name="assistants_id",
        other_pk_col="user_group_id",
        ondelete="CASCADE",
        fk_name="usergroups_assistants_assistants_id_fkey",
    ),
    Relationship(
        table_name="sessions",
        ondelete="CASCADE",
        fk_name="sessions_assistants_fkey",
    ),
    Relationship(
        table_name="assistants_steps_guardrails",
        other_pk_col="step_id",
        ondelete="CASCADE",
    ),
    Relationship(
        table_name="api_keys",
        fk_name="api_keys_assistant_fkey",
        ondelete="CASCADE",
    ),
]


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column("assistants_groups", "agent_id", new_column_name="assistant_id")

    for relationship in RELATIONSHIPS:
        # Create temporary column
        op.add_column(
            relationship.table_name,
            sa.Column(f"{COLUMN_NAME}_uuid", sa.UUID(as_uuid=True)),
        )

        # Set column name
        if relationship.col_name:
            col_name = relationship.col_name
        else:
            col_name = f"{COLUMN_NAME}_id"

        # Fill temporary column with uuid:s matching the id
        op.execute(
            f"""
        UPDATE {relationship.table_name}
        SET {COLUMN_NAME}_uuid = (
            SELECT uuid FROM {TABLE}
            WHERE id = {relationship.table_name}.{col_name}
        )
        """
        )

        # Drop old foreign key constraint and remove old foreign key
        if relationship.fk_name:
            fk = relationship.fk_name
        else:
            fk = f"{relationship.table_name}_{COLUMN_NAME}_id_fkey"

        op.drop_constraint(fk, relationship.table_name, type_="foreignkey")
        op.drop_column(relationship.table_name, col_name)

        # Rename temporary column to id
        op.alter_column(
            relationship.table_name,
            f"{COLUMN_NAME}_uuid",
            new_column_name=f"{COLUMN_NAME}_id",
        )

    # Drop old contraints
    op.drop_constraint(f"{TABLE}_pkey", TABLE, type_="primary")
    op.drop_index(f"ix_{TABLE}_uuid", TABLE, if_exists=True)

    # Drop old primary key, rename new primary key to "id"
    op.drop_column(TABLE, "id")
    op.alter_column(TABLE, "uuid", new_column_name="id")

    # Create new constraint
    op.create_primary_key(f"{TABLE}_pkey", TABLE, ["id"])

    for relationship in RELATIONSHIPS:

        # Create a new foreign key constraint,
        # pointing to the "same" column that has now been updated
        op.create_foreign_key(
            f"{relationship.table_name}_{TABLE}_fkey",
            relationship.table_name,
            TABLE,
            [f"{COLUMN_NAME}_id"],
            ["id"],
            ondelete=relationship.ondelete,
        )

        # If the foreign key is a part of a composite primary key, create that here
        if relationship.other_pk_col is not None:
            op.create_primary_key(
                f"{relationship.table_name}_pkey",
                relationship.table_name,
                [f"{COLUMN_NAME}_id", relationship.other_pk_col],
            )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Made by GPT-4, will probably not work
    # Downgrade will be made using database backups...

    # Reverse all changes related to foreign key and primary key constraints
    for relationship in reversed(RELATIONSHIPS):
        # If the foreign key is a part of a composite primary key, drop that first
        if relationship.other_pk_col is not None:
            op.drop_constraint(
                f"{relationship.table_name}_pkey",
                relationship.table_name,
                type_="primary",
            )

        # Drop the new foreign key constraints
        op.drop_constraint(
            f"{relationship.table_name}_{TABLE}_fkey",
            relationship.table_name,
            type_="foreignkey",
        )

        # Rename the 'id' column back to uuid
        op.alter_column(
            relationship.table_name,
            f"{COLUMN_NAME}_id",
            new_column_name=f"{COLUMN_NAME}_uuid",
        )

        # Recreate the original columns
        if relationship.col_name:
            col_name = relationship.col_name
        else:
            col_name = f"{COLUMN_NAME}_id"

        op.add_column(
            relationship.table_name, sa.Column(col_name, sa.INTEGER, autoincrement=True)
        )

        # Repopulate the original column with ids matching the uuid
        op.execute(
            f"""
            UPDATE {relationship.table_name}
            SET {col_name} = (
                SELECT id FROM {TABLE}
                WHERE uuid = {relationship.table_name}.{COLUMN_NAME}_uuid
            )
            """
        )

        # Drop the temporary uuid column
        op.drop_column(relationship.table_name, f"{COLUMN_NAME}_uuid")

        # Recreate the old foreign key constraint
        if relationship.fk_name:
            fk = relationship.fk_name
        else:
            fk = f"{relationship.table_name}_{COLUMN_NAME}_id"

        op.create_foreign_key(
            fk,
            relationship.table_name,
            TABLE,
            [col_name],
            ['id'],
            ondelete=relationship.ondelete,
        )

    # Restore the original primary key and index
    op.add_column(
        TABLE, sa.Column("id", sa.INTEGER, autoincrement=True, primary_key=True)
    )
    op.alter_column(TABLE, "id", new_column_name="uuid")
    op.create_index(f"ix_{TABLE}_uuid", TABLE, ["uuid"])

    # Restore the primary key constraint
    op.create_primary_key(f"{TABLE}_pkey", TABLE, ["id"])

    # Restore the column name in the assistants_group table
    op.alter_column("assistants_groups", "assistant_id", new_column_name="agent_id")

    # ### end Alembic commands ###
