"""users username and emain unique for tenant
Revision ID: 9d3d6c1d04e8
Revises: 23a1ea2518cf
Create Date: 2024-06-11 15:14:14.971434
"""

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic
revision = "9d3d6c1d04e8"
down_revision = "23a1ea2518cf"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "info_blob_references", "question_id", existing_type=sa.UUID(), nullable=False
    )
    op.create_index(
        op.f("ix_info_blob_references_question_id"),
        "info_blob_references",
        ["question_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_questions_session_id"), "questions", ["session_id"], unique=False
    )
    op.drop_constraint("users_email_key", "users", type_="unique")
    op.drop_constraint("users_username_key", "users", type_="unique")
    op.create_unique_constraint(
        "users_email_tenant_unique", "users", ["email", "tenant_id"]
    )
    op.create_unique_constraint(
        "users_username_tenant_unique", "users", ["username", "tenant_id"]
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("users_username_tenant_unique", "users", type_="unique")
    op.drop_constraint("users_email_tenant_unique", "users", type_="unique")
    op.create_unique_constraint("users_username_key", "users", ["username"])
    op.create_unique_constraint("users_email_key", "users", ["email"])
    op.drop_index(op.f("ix_questions_session_id"), table_name="questions")
    op.drop_index(
        op.f("ix_info_blob_references_question_id"), table_name="info_blob_references"
    )
    op.alter_column(
        "info_blob_references", "question_id", existing_type=sa.UUID(), nullable=True
    )
    # ### end Alembic commands ###
