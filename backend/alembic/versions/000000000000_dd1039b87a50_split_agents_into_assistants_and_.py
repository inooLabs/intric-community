"""split agents into assistants and services
Revision ID: dd1039b87a50
Revises: 29dd8db386e1
Create Date: 2024-05-24 09:47:29.106972
"""

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic
revision = 'dd1039b87a50'
down_revision = '29dd8db386e1'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'services',
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('prompt', sa.String(), nullable=False),
        sa.Column('output_format', sa.String(), nullable=True),
        sa.Column(
            'json_schema', postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column(
            'completion_model_kwargs',
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('completion_model_id', sa.UUID(), nullable=True),
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column(
            'uuid',
            sa.UUID(),
            server_default=sa.text('gen_random_uuid()'),
            nullable=False,
        ),
        sa.Column(
            'created_at',
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text('now()'),
            nullable=False,
        ),
        sa.Column(
            'updated_at',
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text('now()'),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ['completion_model_id'], ['completion_models.id'], ondelete='SET NULL'
        ),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_index(op.f('ix_services_id'), 'services', ['id'], unique=True)
    op.create_index(op.f('ix_services_uuid'), 'services', ['uuid'], unique=True)

    # Copy services to the services table
    conn = op.get_bind()
    conn.execute(
        sa.text(
            """
        INSERT INTO services (
            id, uuid, created_at, updated_at, name, prompt,
            output_format, json_schema, completion_model_kwargs,
            user_id, completion_model_id
        )
        SELECT
            id, uuid, created_at, updated_at, name, prompt,
            output_format, json_schema, completion_model_kwargs,
            user_id, completion_model_id
        FROM assistants
        WHERE type = 'service'
    """
        )
    )

    # Remove foreign key constraints temporarily for tables dependent on assistants
    op.drop_constraint('steps_assistant_id_fkey', 'steps', type_='foreignkey')
    op.drop_constraint('questions_services_fk', 'questions', type_='foreignkey')
    op.drop_constraint('sessions_service_fkey', 'sessions', type_='foreignkey')
    op.drop_constraint(
        'usergroups_services_service_id_fkey',
        'usergroups_services',
        type_='foreignkey',
    )

    # Update foreign keys in agents_groups_table if needed
    # Assuming we have a new linking table for services called `services_groups_table`
    op.create_table(
        'services_groups',
        sa.Column(
            'service_id',
            sa.Integer,
            sa.ForeignKey('services.id', ondelete="CASCADE"),
            primary_key=True,
        ),
        sa.Column(
            'group_id',
            sa.UUID(as_uuid=True),
            sa.ForeignKey('groups.id', ondelete="CASCADE"),
            primary_key=True,
        ),
    )

    # Migrate relevant entries from agents_groups_table to services_groups_table
    conn.execute(
        sa.text(
            """
        INSERT INTO services_groups (service_id, group_id)
        SELECT agent_id, group_id
        FROM agents_groups
        WHERE agent_id IN (SELECT id FROM services)
    """
        )
    )

    # Optionally remove migrated rows from agents_groups_table
    conn.execute(
        sa.text(
            """
        DELETE FROM agents_groups
        WHERE agent_id IN (SELECT id FROM services)
    """
        )
    )

    # Recreate foreign key constraints after migration
    op.create_foreign_key(
        'steps_assistant_id_fkey',
        'steps',
        'services',
        ['assistant_id'],
        ['id'],
        ondelete='CASCADE',
    )
    op.create_foreign_key(
        'questions_services_fkey',
        'questions',
        'services',
        ['service_id'],
        ['id'],
        ondelete='CASCADE',
    )
    op.create_foreign_key(
        'sessions_service_fkey',
        'sessions',
        'services',
        ['service_id'],
        ['id'],
        ondelete='CASCADE',
    )
    op.create_foreign_key(
        'usergroups_services_service_id_fkey',
        'usergroups_services',
        'services',
        ['service_id'],
        ['id'],
        ondelete='CASCADE',
    )

    # Optionally remove migrated rows from assistants table if needed
    conn.execute(
        sa.text(
            """
        DELETE FROM assistants
        WHERE type = 'service'
    """
        )
    )

    # Drop the type column and service specific columns
    op.drop_column('assistants', 'type')
    op.drop_column('assistants', 'output_format')
    op.drop_column('assistants', 'json_schema')

    # Rename table
    op.rename_table("agents_groups", "assistants_groups")

    # ### end Alembic commands ###


def downgrade():
    op.rename_table("assistants_groups", "agents_groups")

    # Recreate type column in assistants table if needed
    op.add_column('assistants', sa.Column('type', sa.String(50)))
    op.add_column('assistants', sa.Column('output_format', sa.String(), nullable=True))
    op.add_column(
        'assistants',
        sa.Column(
            'json_schema', postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
    )
    op.alter_column('assistants', 'logging_enabled', nullable=True)
    op.alter_column('assistants', 'is_public', nullable=True)

    # Remove foreign key constraints temporarily for tables dependent on assistants
    op.drop_constraint('steps_assistant_id_fkey', 'steps', type_='foreignkey')
    op.drop_constraint('questions_services_fkey', 'questions', type_='foreignkey')
    op.drop_constraint('sessions_service_fkey', 'sessions', type_='foreignkey')
    op.drop_constraint(
        'usergroups_services_service_id_fkey',
        'usergroups_services',
        type_='foreignkey',
    )

    # Get bind
    connection = op.get_bind()

    # Move data back to assistants table
    connection.execute(
        sa.text(
            """
        INSERT INTO assistants (
            id, uuid, created_at, updated_at, name, prompt,
            output_format, json_schema, completion_model_kwargs,
            user_id, completion_model_id, type
        )
        SELECT
            id, uuid, created_at, updated_at, name, prompt,
            output_format, json_schema, completion_model_kwargs,
            user_id, completion_model_id, 'service'
        FROM services
    """
        )
    )

    # Migrate data back from services_groups_table to agents_groups_table
    connection = op.get_bind()
    connection.execute(
        sa.text(
            """
        INSERT INTO agents_groups (agent_id, group_id)
        SELECT service_id, group_id
        FROM services_groups
    """
        )
    )

    # Drop the services_groups_table
    op.drop_table('services_groups')

    # Drop the services table
    op.drop_table('services')

    # Restore original foreign key constraints
    op.create_foreign_key(
        'steps_assistant_id_fkey', 'steps', 'assistants', ['assistant_id'], ['id']
    )
    op.create_foreign_key(
        'questions_services_fk', 'questions', 'assistants', ['service_id'], ['id']
    )
    op.create_foreign_key(
        'sessions_service_fkey', 'sessions', 'assistants', ['service_id'], ['id']
    )
    op.create_foreign_key(
        'usergroups_services_service_id_fkey',
        'usergroups_services',
        'assistants',
        ['service_id'],
        ['id'],
    )
