# flake8: noqa

"""add transcription model table
Revision ID: 65ff84b31e90
Revises: f522b20040a3
Create Date: 2025-03-11 10:59:44.115988
"""

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic
revision = '65ff84b31e90'
down_revision = 'f522b20040a3'
branch_labels = None
depends_on = None


INSERT_STATEMENT = """
    INSERT INTO transcription_models
    (name, model_name, open_source, is_deprecated, hf_link, family, stability, hosting, description, org, base_url)
    VALUES
    (
        :name,
        :model_name,
        :open_source,
        :is_deprecated,
        :hf_link,
        :family,
        :stability,
        :hosting,
        :description,
        :org,
        :base_url
    )
"""


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'transcription_models',
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('model_name', sa.String(), nullable=False),
        sa.Column('open_source', sa.Boolean(), nullable=True),
        sa.Column(
            'is_deprecated', sa.Boolean(), server_default='False', nullable=False
        ),
        sa.Column('hf_link', sa.String(), nullable=True),
        sa.Column('family', sa.String(), nullable=False),
        sa.Column('stability', sa.String(), nullable=False),
        sa.Column('hosting', sa.String(), nullable=False),
        sa.Column('description', sa.String(), nullable=True),
        sa.Column('org', sa.String(), nullable=True),
        sa.Column('base_url', sa.String(), nullable=False),
        sa.Column(
            'id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False
        ),
        sa.Column(
            'created_at',
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text('now()'),
            nullable=False,
        ),
        sa.Column(
            'updated_at',
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text('now()'),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name'),
    )
    op.create_table(
        'transcription_model_settings',
        sa.Column('tenant_id', sa.UUID(), nullable=False),
        sa.Column('transcription_model_id', sa.UUID(), nullable=False),
        sa.Column(
            'is_org_enabled', sa.Boolean(), server_default='False', nullable=False
        ),
        sa.Column(
            'is_org_default', sa.Boolean(), server_default='False', nullable=False
        ),
        sa.Column(
            'created_at',
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text('now()'),
            nullable=False,
        ),
        sa.Column(
            'updated_at',
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text('now()'),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(
            ['transcription_model_id'], ['transcription_models.id'], ondelete='CASCADE'
        ),
        sa.PrimaryKeyConstraint('tenant_id', 'transcription_model_id'),
    )

    # Insert initial transcription models
    conn = op.get_bind()

    # Insert OpenAI Whisper model
    conn.execute(
        sa.text(INSERT_STATEMENT),
        parameters={
            "name": "Whisper",
            "model_name": "whisper-1",
            "open_source": False,
            "is_deprecated": False,
            "hf_link": None,
            "family": "openai",
            "stability": "stable",
            "hosting": "usa",
            "description": "OpenAI Whisper model for audio transcription.",
            "org": "OpenAI",
            "base_url": "https://api.openai.com/v1",
        },
    )
    
    # Insert KB-Whisper model
    conn.execute(
        sa.text(INSERT_STATEMENT),
        parameters={
            "name": "KB-Whisper",
            "model_name": "KBLab/kb-whisper-large",
            "open_source": True,
            "is_deprecated": False,
            "hf_link": "https://huggingface.co/KBLab/kb-whisper-large",
            "family": "openai",
            "stability": "stable",
            "hosting": "eu",
            "description": "Fine-tuned version of Whisper, specialized on the Swedish language.",
            "org": "KBLab",
            "base_url": "https://gpu3.intric.ai/v1/",
        },
    )
    
    # Get all transcription models and tenants
    transcription_models = conn.execute(sa.text("SELECT id FROM transcription_models")).fetchall()
    tenants = conn.execute(sa.text("SELECT id FROM tenants")).fetchall()
    
    # Get KB-Whisper model ID for setting as default
    kb_whisper = conn.execute(sa.text("SELECT id FROM transcription_models WHERE model_name = 'KBLab/kb-whisper-large'")).fetchone()
    kb_whisper_id = kb_whisper[0] if kb_whisper else None
    
    # Enable all transcription models for all tenants
    for tenant in tenants:
        for model in transcription_models:
            is_default = model[0] == kb_whisper_id if kb_whisper_id else False
            conn.execute(
                sa.text("""
                    INSERT INTO transcription_model_settings
                    (tenant_id, transcription_model_id, is_org_enabled, is_org_default)
                    VALUES (:tenant_id, :model_id, TRUE, :is_default)
                """),
                parameters={
                    "tenant_id": tenant[0],
                    "model_id": model[0],
                    "is_default": is_default
                }
            )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('transcription_model_settings')
    op.drop_table('transcription_models')
    # ### end Alembic commands ###
