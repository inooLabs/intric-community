# flake8: noqa

"""Creating integration tables and new columns
Revision ID: 8184cbc174ae
Revises: cf67a0d56ae1
Create Date: 2025-03-03 16:49:44.406467
"""

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic
revision = "8184cbc174ae"
down_revision = "cf67a0d56ae1"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "integration_knowledge",
        sa.Column("name", sa.Text(), nullable=True),
        sa.Column("url", sa.Text(), nullable=True),
        sa.Column("space_id", sa.UUID(), nullable=False),
        sa.Column("embedding_model_id", sa.UUID(), nullable=False),
        sa.Column("tenant_id", sa.UUID(), nullable=False),
        sa.Column("user_integration_id", sa.UUID(), nullable=False),
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["embedding_model_id"], ["embedding_models.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["space_id"], ["spaces.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["tenant_id"], ["tenants.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["user_integration_id"], ["user_integrations.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "assistant_integration_knowledge",
        sa.Column("assistant_id", sa.UUID(), nullable=False),
        sa.Column("integration_knowledge_id", sa.UUID(), nullable=False),
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["assistant_id"], ["assistants.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["integration_knowledge_id"],
            ["integration_knowledge.id"],
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.add_column(
        "info_blobs", sa.Column("integration_knowledge_id", sa.UUID(), nullable=True)
    )
    op.create_foreign_key(
        None,
        "info_blobs",
        "integration_knowledge",
        ["integration_knowledge_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.add_column(
        "integrations",
        sa.Column(
            "integration_type", sa.Text(), server_default="default_type", nullable=False
        ),
    )
    op.create_index(
        op.f("ix_integrations_integration_type"),
        "integrations",
        ["integration_type"],
        unique=False,
    )

    op.execute(
        """
        INSERT INTO integrations ("name", description, integration_type) VALUES
        ('Confluence', 'Confluence Integration provides seamless access to Confluence spaces, pages, and content directly from external applications. It enables users to view, search, and manage Confluence content while ensuring secure and efficient collaboration across platforms.', 'confluence');
        """
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_integrations_integration_type"), table_name="integrations")
    op.drop_column("integrations", "integration_type")
    op.drop_constraint(
        "info_blobs_integration_knowledge_id_fkey", "info_blobs", type_="foreignkey"
    )
    op.drop_column("info_blobs", "integration_knowledge_id")
    op.drop_table("assistant_integration_knowledge")
    op.drop_table("integration_knowledge")

    op.execute(
        """
        DELETE FROM integrations WHERE integration_type = 'confluence';
        """
    )
    # ### end Alembic commands ###
