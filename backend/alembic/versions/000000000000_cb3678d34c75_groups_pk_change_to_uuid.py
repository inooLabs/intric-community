"""groups_pk_change_to_uuid
Revision ID: cb3678d34c75
Revises: cf413adcf3c1
Create Date: 2024-05-20 13:45:56.454509
"""

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic
revision = 'cb3678d34c75'
down_revision = 'cf413adcf3c1'
branch_labels = None
depends_on = None


FKS = [
    ("agents_groups", "agent_id"),
    ("usergroups_groups", "user_group_id"),
    ("info_blobs", ""),
]


def upgrade() -> None:
    for tablename, _ in FKS:
        # Create temporary column
        op.add_column(
            tablename,
            sa.Column("group_uuid", sa.UUID(as_uuid=True)),
        )

        # Fill temporary column with uuid:s matching the id
        op.execute(
            f"""
        UPDATE {tablename}
        SET group_uuid = (SELECT uuid FROM groups WHERE id = {tablename}.group_id)
        """
        )

        # Drop old constraint and remove old foreign key
        op.drop_constraint(f"{tablename}_group_id_fkey", tablename, type_="foreignkey")
        op.drop_column(tablename, "group_id")

        # Rename temporary column to id
        op.alter_column(tablename, "group_uuid", new_column_name="group_id")

    # Drop old contraints
    op.drop_constraint("groups_pkey", "groups", type_="primary")

    # Drop old primary key, rename new primary key to "id"
    op.drop_column("groups", "id")
    op.alter_column("groups", "uuid", new_column_name="id")

    # Create new constraint
    op.create_primary_key("groups_pkey", "groups", ["id"])

    for tablename, other_pk_col in FKS:

        # Create a new foreign key constraint,
        # pointing to the "same" column that has now been updated
        op.create_foreign_key(
            f"{tablename}_groups_fkey",
            tablename,
            "groups",
            ["group_id"],
            ["id"],
            ondelete="CASCADE",
        )

        # If the foreign key is a part of a composite primary key, create that here
        if other_pk_col:
            op.create_primary_key(
                f"{tablename}_pkey", tablename, ["group_id", other_pk_col]
            )


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    for tablename, other_pk_col in FKS:
        op.add_column(
            tablename,
            sa.Column("group_int_id", sa.Integer),
        )
        op.execute(
            f"""
        UPDATE {tablename}
        SET group_int_id = (SELECT old_id FROM groups WHERE id = {tablename}.group_id)
        """
        )
        op.drop_constraint(f"{tablename}_group_id_fkey", tablename, type_="foreignkey")
        op.drop_column(tablename, "group_id")
        op.alter_column(tablename, "group_int_id", new_column_name="group_id")

    op.drop_constraint("groups_pkey", "groups", type_="primary")
    op.create_primary_key(None, "groups", ["old_id"])
    op.alter_column("groups", "id", new_column_name="uuid")
    op.alter_column("groups", "old_id", new_column_name="id")

    op.drop_constraint("groups_old_id_key", "groups", type_="unique")
    op.create_unique_constraint(None, "groups", ["uuid"])

    for tablename, other_pk_col in FKS:
        op.create_foreign_key(
            None, tablename, "groups", ["group_id"], ["id"], ondelete="CASCADE"
        )

        if other_pk_col:
            op.create_primary_key(
                None,
                tablename,
                ["group_id", other_pk_col],
            )

    # ### end Alembic commands ###
