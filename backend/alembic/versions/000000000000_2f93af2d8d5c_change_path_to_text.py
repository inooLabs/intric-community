"""change path to text
Revision ID: 2f93af2d8d5c
Revises: 63f7e27b67cc
Create Date: 2023-07-24 13:58:15.729627
"""
import os

import sqlalchemy as sa
from dotenv import load_dotenv

from alembic import op

load_dotenv()

# revision identifiers, used by Alembic
revision = '2f93af2d8d5c'
down_revision = '63f7e27b67cc'
branch_labels = None
depends_on = None

GET_ALL_PATHS_AND_IDS = """
    SELECT id, path
    FROM info_blobs
"""

INSERT_INTO_TEXT = """
    UPDATE info_blobs
    SET text = (%s)
    WHERE id = %s
"""


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(
        op.f('ix_groups_created_at'), 'groups', ['created_at'], unique=False
    )
    op.create_index(op.f('ix_groups_id'), 'groups', ['id'], unique=False)
    op.create_index(
        op.f('ix_groups_updated_at'), 'groups', ['updated_at'], unique=False
    )
    op.add_column('info_blobs', sa.Column('text', sa.Text()))
    op.alter_column("info_blobs", "path", nullable=True)

    # Read the texts from the paths when both columns exist in the table
    conn = op.get_bind()
    res = conn.execute(sa.text(GET_ALL_PATHS_AND_IDS))
    results = res.fetchall()
    paths = [{"id": r[0], "path": r[1]} for r in results if r[1] is not None]

    for path in paths:
        with open(os.getenv("FILE_STORAGE_LOCATION") + path["path"], "r") as f:
            text = f.read()

        text = text.replace("\x00", "\uFFFD")

        conn.execute(sa.text(INSERT_INTO_TEXT), text, path['id'])

    op.create_index(
        op.f('ix_info_blobs_created_at'), 'info_blobs', ['created_at'], unique=False
    )
    op.create_index(op.f('ix_info_blobs_id'), 'info_blobs', ['id'], unique=False)
    op.create_index(
        op.f('ix_info_blobs_updated_at'), 'info_blobs', ['updated_at'], unique=False
    )
    op.drop_column('info_blobs', 'author')
    op.create_index(
        op.f('ix_settings_created_at'), 'settings', ['created_at'], unique=False
    )
    op.create_index(op.f('ix_settings_id'), 'settings', ['id'], unique=False)
    op.create_index(
        op.f('ix_settings_updated_at'), 'settings', ['updated_at'], unique=False
    )
    op.create_index(op.f('ix_users_created_at'), 'users', ['created_at'], unique=False)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_updated_at'), 'users', ['updated_at'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_updated_at'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_created_at'), table_name='users')
    op.drop_index(op.f('ix_settings_updated_at'), table_name='settings')
    op.drop_index(op.f('ix_settings_id'), table_name='settings')
    op.drop_index(op.f('ix_settings_created_at'), table_name='settings')
    op.add_column(
        'info_blobs',
        sa.Column('author', sa.TEXT(), autoincrement=False),
    )
    op.drop_index(op.f('ix_info_blobs_updated_at'), table_name='info_blobs')
    op.drop_index(op.f('ix_info_blobs_id'), table_name='info_blobs')
    op.drop_index(op.f('ix_info_blobs_created_at'), table_name='info_blobs')
    op.drop_column('info_blobs', 'text')
    op.drop_index(op.f('ix_groups_updated_at'), table_name='groups')
    op.drop_index(op.f('ix_groups_id'), table_name='groups')
    op.drop_index(op.f('ix_groups_created_at'), table_name='groups')
    # ### end Alembic commands ###
