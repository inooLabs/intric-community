/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/v1/crawl-runs/{id}/": {
    /** Get Crawl Run */
    get: operations["get_crawl_run_api_v1_crawl_runs__id___get"];
  };
  "/api/v1/apps/{id}/": {
    /** Get App */
    get: operations["get_app_api_v1_apps__id___get"];
    /** Delete App */
    delete: operations["delete_app_api_v1_apps__id___delete"];
    /** Update App */
    patch: operations["update_app_api_v1_apps__id___patch"];
  };
  "/api/v1/apps/{id}/runs/": {
    /** Get App Runs */
    get: operations["get_app_runs_api_v1_apps__id__runs__get"];
    /** Run App */
    post: operations["run_app_api_v1_apps__id__runs__post"];
  };
  "/api/v1/apps/{id}/prompts/": {
    /** Get Prompts */
    get: operations["get_prompts_api_v1_apps__id__prompts__get"];
  };
  "/api/v1/app-runs/{id}/": {
    /** Get App Run */
    get: operations["get_app_run_api_v1_app_runs__id___get"];
    /** Delete App Run */
    delete: operations["delete_app_run_api_v1_app_runs__id___delete"];
  };
  "/api/v1/users/login/token/": {
    /**
     * Login
     * @description OAuth2 Login
     */
    post: operations["Login_api_v1_users_login_token__post"];
  };
  "/api/v1/users/login/openid-connect/mobilityguard/": {
    /**
     * Login With Mobilityguard
     * @description OpenID Connect Login with mobilityguard.
     */
    post: operations["login_with_mobilityguard_api_v1_users_login_openid_connect_mobilityguard__post"];
  };
  "/api/v1/users/": {
    /** Get Tenant Users */
    get: operations["get_tenant_users_api_v1_users__get"];
  };
  "/api/v1/users/me/": {
    /** Get Current User */
    get: operations["Get_current_user_api_v1_users_me__get"];
  };
  "/api/v1/users/api-keys/": {
    /**
     * Generate Api Key
     * @description Generating a new api key will delete the old key.
     * Make sure to copy the key since it will only be showed once,
     * after which only the truncated key will be shown.
     */
    get: operations["generate_api_key_api_v1_users_api_keys__get"];
  };
  "/api/v1/users/tenant/": {
    /** Get Current User Tenant */
    get: operations["Get_current_user_tenant_api_v1_users_tenant__get"];
  };
  "/api/v1/users/admin/invite/": {
    /** Invite User */
    post: operations["invite_user_api_v1_users_admin_invite__post"];
  };
  "/api/v1/users/admin/{id}/": {
    /** Delete User */
    delete: operations["delete_user_api_v1_users_admin__id___delete"];
    /** Update User */
    patch: operations["update_user_api_v1_users_admin__id___patch"];
  };
  "/api/v1/users/provision/": {
    /** Provision User */
    post: operations["provision_user_api_v1_users_provision__post"];
  };
  "/api/v1/info-blobs/": {
    /**
     * Get Info Blob Ids
     * @description Returns a list of info-blobs.
     *
     * Does not return the text of each info-blob, 'text' will be null.
     */
    get: operations["get_info_blob_ids_api_v1_info_blobs__get"];
  };
  "/api/v1/info-blobs/{id}/": {
    /** Get Info Blob */
    get: operations["get_info_blob_api_v1_info_blobs__id___get"];
    /**
     * Update Info Blob
     * @description Omitted fields are not updated.
     */
    post: operations["update_info_blob_api_v1_info_blobs__id___post"];
    /**
     * Delete Info Blob
     * @description Returns the deleted object.
     */
    delete: operations["delete_info_blob_api_v1_info_blobs__id___delete"];
  };
  "/api/v1/groups/": {
    /** Get Groups */
    get: operations["get_groups_api_v1_groups__get"];
    /**
     * Create Group
     * @deprecated
     * @description Valid values for `embedding_model` are the provided by `GET /api/v1/settings/models/`.
     * Use the `name` field of the response from this endpoint.
     */
    post: operations["create_group_api_v1_groups__post"];
  };
  "/api/v1/groups/{id}/": {
    /** Get Group By Id */
    get: operations["get_group_by_id_api_v1_groups__id___get"];
    /** Update Group */
    post: operations["update_group_api_v1_groups__id___post"];
    /** Delete Group By Id */
    delete: operations["delete_group_by_id_api_v1_groups__id___delete"];
  };
  "/api/v1/groups/{id}/info-blobs/": {
    /** Get Info Blobs */
    get: operations["get_info_blobs_api_v1_groups__id__info_blobs__get"];
    /**
     * Add Info Blobs
     * @description Maximum allowed simultaneous upload is 128.
     *
     * Will be embedded using the embedding model of the group.
     */
    post: operations["add_info_blobs_api_v1_groups__id__info_blobs__post"];
  };
  "/api/v1/groups/{id}/info-blobs/upload/": {
    /**
     * Upload File
     * @description Starts a job, use the job operations to keep track of this job
     */
    post: operations["upload_file_api_v1_groups__id__info_blobs_upload__post"];
  };
  "/api/v1/groups/{id}/searches/": {
    /** Run Semantic Search */
    post: operations["run_semantic_search_api_v1_groups__id__searches__post"];
  };
  "/api/v1/groups/{id}/transfer/": {
    /** Transfer Group To Space */
    post: operations["transfer_group_to_space_api_v1_groups__id__transfer__post"];
  };
  "/api/v1/settings/": {
    /** Get Settings */
    get: operations["get_settings_api_v1_settings__get"];
    /**
     * Upsert Settings
     * @description Omitted fields are not updated.
     */
    post: operations["upsert_settings_api_v1_settings__post"];
  };
  "/api/v1/settings/models/": {
    /**
     * Get Models
     * @description From the response:
     *     - use the `id` field as values for `completion_model`
     *     - use the `id` field as values for `embedding_model`
     *
     * in creating and updating `Assistants` and `Services`.
     */
    get: operations["get_models_api_v1_settings_models__get"];
  };
  "/api/v1/settings/formats/": {
    /** Get Formats */
    get: operations["get_formats_api_v1_settings_formats__get"];
  };
  "/api/v1/assistants/": {
    /**
     * Get Assistants
     * @description Requires Admin permission if `for_tenant` is `true`.
     */
    get: operations["get_assistants_api_v1_assistants__get"];
    /**
     * Create Assistant
     * @deprecated
     */
    post: operations["create_assistant_api_v1_assistants__post"];
  };
  "/api/v1/assistants/{id}/": {
    /** Get Assistant */
    get: operations["get_assistant_api_v1_assistants__id___get"];
    /**
     * Update Assistant
     * @description Omitted fields are not updated
     */
    post: operations["update_assistant_api_v1_assistants__id___post"];
    /** Delete Assistant */
    delete: operations["delete_assistant_api_v1_assistants__id___delete"];
  };
  "/api/v1/assistants/{id}/sessions/": {
    /** Get Assistant Sessions */
    get: operations["get_assistant_sessions_api_v1_assistants__id__sessions__get"];
    /**
     * Ask Assistant
     * @description Streams the response as Server-Sent Events if stream == true
     */
    post: operations["ask_assistant_api_v1_assistants__id__sessions__post"];
  };
  "/api/v1/assistants/{id}/sessions/{session_id}/": {
    /** Get Assistant Session */
    get: operations["get_assistant_session_api_v1_assistants__id__sessions__session_id___get"];
    /**
     * Ask Followup
     * @description Streams the response as Server-Sent Events if stream == true
     */
    post: operations["ask_followup_api_v1_assistants__id__sessions__session_id___post"];
    /** Delete Assistant Session */
    delete: operations["delete_assistant_session_api_v1_assistants__id__sessions__session_id___delete"];
  };
  "/api/v1/assistants/{id}/sessions/{session_id}/feedback/": {
    /** Leave Feedback */
    post: operations["leave_feedback_api_v1_assistants__id__sessions__session_id__feedback__post"];
  };
  "/api/v1/assistants/{id}/api-keys/": {
    /**
     * Generate Read Only Assistant Key
     * @description Generates a read-only api key for this assistant.
     *
     * This api key can only be used on `POST /api/v1/assistants/{id}/sessions/`
     * and `POST /api/v1/assistants/{id}/sessions/{session_id}/`.
     */
    get: operations["generate_read_only_assistant_key_api_v1_assistants__id__api_keys__get"];
  };
  "/api/v1/assistants/{id}/transfer/": {
    /** Transfer Assistant To Space */
    post: operations["transfer_assistant_to_space_api_v1_assistants__id__transfer__post"];
  };
  "/api/v1/services/": {
    /** Get Services */
    get: operations["get_services_api_v1_services__get"];
    /**
     * Create Service
     * @deprecated
     * @description Create a service.
     *
     * `json_schema` is required if `output_validation` is 'json'.
     *
     * Conversely, `json_schema` is not evaluated if `output_format` is not 'json'.
     *
     * if `output_format` is omitted, the output will not be formatted.
     */
    post: operations["create_service_api_v1_services__post"];
  };
  "/api/v1/services/{id}/": {
    /** Get Service */
    get: operations["get_service_api_v1_services__id___get"];
    /**
     * Update Service
     * @description Omitted fields are not updated
     */
    post: operations["update_service_api_v1_services__id___post"];
    /** Delete Service */
    delete: operations["delete_service_api_v1_services__id___delete"];
  };
  "/api/v1/services/{id}/run/": {
    /** Get Service Runs */
    get: operations["get_service_runs_api_v1_services__id__run__get"];
    /**
     * Run Service
     * @description The schema of the output will be depending on the output validation of the service
     */
    post: operations["run_service_api_v1_services__id__run__post"];
  };
  "/api/v1/services/{id}/transfer/": {
    /** Transfer Service To Space */
    post: operations["transfer_service_to_space_api_v1_services__id__transfer__post"];
  };
  "/api/v1/logging/{message_id}/": {
    /** Get Logging Details */
    get: operations["get_logging_details_api_v1_logging__message_id___get"];
  };
  "/api/v1/analysis/counts/": {
    /**
     * Get Counts
     * @description Total counts.
     */
    get: operations["get_counts_api_v1_analysis_counts__get"];
  };
  "/api/v1/analysis/metadata-statistics/": {
    /**
     * Get Metadata
     * @description Data for analytics
     */
    get: operations["get_metadata_api_v1_analysis_metadata_statistics__get"];
  };
  "/api/v1/analysis/assistants/{assistant_id}/": {
    /**
     * Get Most Recent Questions
     * @description Get all the questions asked to an assistant in the last `days_since` days.
     *
     * `days_since`: How long back in time to get the questions.
     *
     * `include_followups`: If not selected, only the first question of a session is returned.
     *     Order is by date ascending, but if followups are included they are grouped together
     *     with their original question.
     */
    get: operations["get_most_recent_questions_api_v1_analysis_assistants__assistant_id___get"];
    /**
     * Ask Question About Questions
     * @description Ask a question with the questions asked to an assistant in the last
     *   `days_since` days as the context.
     *
     * `days_since`: How long back in time to get the questions.
     *
     * `include_followups`: If not selected, only the first question of a session is returned.
     *     Order is by date ascending, but if followups are included they are grouped together
     *     with their original question.
     */
    post: operations["ask_question_about_questions_api_v1_analysis_assistants__assistant_id___post"];
  };
  "/api/v1/admin/users/": {
    /**
     * Get Users
     * @deprecated
     */
    get: operations["get_users_api_v1_admin_users__get"];
    /**
     * Register User
     * @deprecated
     */
    post: operations["register_user_api_v1_admin_users__post"];
  };
  "/api/v1/admin/users/{username}/": {
    /**
     * Update User
     * @deprecated
     * @description Omitted fields are not updated.
     */
    post: operations["update_user_api_v1_admin_users__username___post"];
  };
  "/api/v1/admin/users/{username}": {
    /**
     * Delete User
     * @deprecated
     */
    delete: operations["delete_user_api_v1_admin_users__username__delete"];
  };
  "/api/v1/admin/privacy-policy/": {
    /**
     * Update Privacy Policy
     * @deprecated
     */
    post: operations["update_privacy_policy_api_v1_admin_privacy_policy__post"];
  };
  "/api/v1/security-levels": {
    /**
     * List Security Levels
     * @description List all security levels for the current tenant ordered by value.
     *
     * Returns:
     *     List of security levels ordered by value.
     *
     * Raises:
     *     403: If the user doesn't have permission to list security levels.
     */
    get: operations["list_security_levels_api_v1_security_levels_get"];
    /**
     * Create Security Level
     * @description Create a new security level for the current tenant.
     *
     * Args:
     *     request: The security level creation request.
     *
     * Returns:
     *     The created security level.
     *
     * Raises:
     *     400: If the request is invalid.
     *     409: If a security level with the same name already exists for this tenant.
     */
    post: operations["create_security_level_api_v1_security_levels_post"];
  };
  "/api/v1/security-levels/{id}": {
    /**
     * Get Security Level
     * @description Get a security level by ID.
     *
     * Args:
     *     id: The ID of the security level.
     *
     * Returns:
     *     The security level.
     *
     * Raises:
     *     403: If the user doesn't have permission to view the security level.
     *     404: If the security level doesn't exist or belongs to a different tenant.
     */
    get: operations["get_security_level_api_v1_security_levels__id__get"];
    /**
     * Delete Security Level
     * @description Delete a security level.
     *
     * Args:
     *     id: The ID of the security level to delete.
     *
     * Raises:
     *     403: If the user doesn't have permission to delete the security level.
     *     404: If the security level doesn't exist or belongs to a different tenant.
     *     409: If the security level is in use by any spaces or models.
     */
    delete: operations["delete_security_level_api_v1_security_levels__id__delete"];
    /**
     * Update Security Level
     * @description Update a security level.
     *
     * Args:
     *     id: The ID of the security level to update.
     *     request: The update request.
     *
     * Returns:
     *     The updated security level.
     *
     * Raises:
     *     400: If the request is invalid.
     *     403: If the user doesn't have permission to update the security level.
     *     404: If the security level doesn't exist or belongs to a different tenant.
     *     409: If updating the name would create a duplicate within the tenant.
     */
    patch: operations["update_security_level_api_v1_security_levels__id__patch"];
  };
  "/api/v1/jobs/": {
    /** Get Jobs */
    get: operations["get_jobs_api_v1_jobs__get"];
  };
  "/api/v1/jobs/{id}/": {
    /** Get Job */
    get: operations["get_job_api_v1_jobs__id___get"];
  };
  "/api/v1/user-groups/": {
    /** Get User Groups */
    get: operations["get_user_groups_api_v1_user_groups__get"];
    /** Create User Group */
    post: operations["create_user_group_api_v1_user_groups__post"];
  };
  "/api/v1/user-groups/{id}/": {
    /** Get User Group By Uuid */
    get: operations["get_user_group_by_uuid_api_v1_user_groups__id___get"];
    /** Update User Group */
    post: operations["update_user_group_api_v1_user_groups__id___post"];
    /** Delete User Group By Uuid */
    delete: operations["delete_user_group_by_uuid_api_v1_user_groups__id___delete"];
  };
  "/api/v1/user-groups/{id}/users/{user_id}/": {
    /** Add User To User Group */
    post: operations["add_user_to_user_group_api_v1_user_groups__id__users__user_id___post"];
    /** Delete User From User Group */
    delete: operations["delete_user_from_user_group_api_v1_user_groups__id__users__user_id___delete"];
  };
  "/api/v1/allowed-origins/": {
    /** Get Origins */
    get: operations["get_origins_api_v1_allowed_origins__get"];
  };
  "/api/v1/completion-models/": {
    /** Get Completion Models */
    get: operations["get_completion_models_api_v1_completion_models__get"];
  };
  "/api/v1/completion-models/{id}/": {
    /** Update Completion Model */
    post: operations["update_completion_model_api_v1_completion_models__id___post"];
  };
  "/api/v1/embedding-models/": {
    /** Get Embedding Models */
    get: operations["get_embedding_models_api_v1_embedding_models__get"];
  };
  "/api/v1/embedding-models/{id}/": {
    /** Enable Embedding Model */
    post: operations["enable_embedding_model_api_v1_embedding_models__id___post"];
  };
  "/api/v1/files/": {
    /** Get Files */
    get: operations["get_files_api_v1_files__get"];
    /** Upload File */
    post: operations["upload_file_api_v1_files__post"];
  };
  "/api/v1/files/{id}/": {
    /** Get File */
    get: operations["get_file_api_v1_files__id___get"];
    /** Delete File */
    delete: operations["delete_file_api_v1_files__id___delete"];
  };
  "/api/v1/limits/": {
    /** Get Limits */
    get: operations["get_limits_api_v1_limits__get"];
  };
  "/api/v1/spaces/": {
    /** Get Spaces */
    get: operations["get_spaces_api_v1_spaces__get"];
    /** Create Space */
    post: operations["create_space_api_v1_spaces__post"];
  };
  "/api/v1/spaces/{id}/": {
    /** Get Space */
    get: operations["get_space_api_v1_spaces__id___get"];
    /** Delete Space */
    delete: operations["delete_space_api_v1_spaces__id___delete"];
    /** Update Space */
    patch: operations["update_space_api_v1_spaces__id___patch"];
  };
  "/api/v1/spaces/{id}/applications/": {
    /** Get Space Applications */
    get: operations["get_space_applications_api_v1_spaces__id__applications__get"];
  };
  "/api/v1/spaces/{id}/applications/assistants/": {
    /** Create Space Assistant */
    post: operations["create_space_assistant_api_v1_spaces__id__applications_assistants__post"];
  };
  "/api/v1/spaces/{id}/applications/apps/": {
    /** Create App */
    post: operations["create_app_api_v1_spaces__id__applications_apps__post"];
  };
  "/api/v1/spaces/{id}/applications/services/": {
    /** Create Space Services */
    post: operations["create_space_services_api_v1_spaces__id__applications_services__post"];
  };
  "/api/v1/spaces/{id}/knowledge/": {
    /** Get Space Knowledge */
    get: operations["get_space_knowledge_api_v1_spaces__id__knowledge__get"];
  };
  "/api/v1/spaces/{id}/knowledge/groups/": {
    /** Create Space Groups */
    post: operations["create_space_groups_api_v1_spaces__id__knowledge_groups__post"];
  };
  "/api/v1/spaces/{id}/knowledge/websites/": {
    /** Create Space Websites */
    post: operations["create_space_websites_api_v1_spaces__id__knowledge_websites__post"];
  };
  "/api/v1/spaces/{id}/members/": {
    /** Add Space Member */
    post: operations["add_space_member_api_v1_spaces__id__members__post"];
  };
  "/api/v1/spaces/{id}/members/{user_id}/": {
    /** Remove Space Member */
    delete: operations["remove_space_member_api_v1_spaces__id__members__user_id___delete"];
    /** Change Role Of Member */
    patch: operations["change_role_of_member_api_v1_spaces__id__members__user_id___patch"];
  };
  "/api/v1/spaces/type/personal/": {
    /** Get Personal Space */
    get: operations["get_personal_space_api_v1_spaces_type_personal__get"];
  };
  "/api/v1/spaces/{id}/update/dryrun/": {
    /**
     * Update Space Dryrun
     * @description Analyze the impact of updating a space's properties without actually applying the changes.
     * Currently supports:
     * - Security level changes: Shows which models would be affected
     */
    post: operations["update_space_dryrun_api_v1_spaces__id__update_dryrun__post"];
  };
  "/api/v1/dashboard/": {
    /** Get Dashboard */
    get: operations["get_dashboard_api_v1_dashboard__get"];
  };
  "/api/v1/websites/": {
    /** Get Websites */
    get: operations["get_websites_api_v1_websites__get"];
    /**
     * Create Website
     * @deprecated
     * @description If `crawl_type` is `sitemap`, `allowed_path` and `download_files` must be unset.
     */
    post: operations["create_website_api_v1_websites__post"];
  };
  "/api/v1/websites/{id}/": {
    /** Get Website */
    get: operations["get_website_api_v1_websites__id___get"];
    /** Update Website */
    post: operations["update_website_api_v1_websites__id___post"];
    /** Delete Website */
    delete: operations["delete_website_api_v1_websites__id___delete"];
  };
  "/api/v1/websites/{id}/run/": {
    /** Run Crawl */
    post: operations["run_crawl_api_v1_websites__id__run__post"];
  };
  "/api/v1/websites/{id}/runs/": {
    /** Get Crawl Runs */
    get: operations["get_crawl_runs_api_v1_websites__id__runs__get"];
  };
  "/api/v1/websites/{id}/transfer/": {
    /** Transfer Website To Space */
    post: operations["transfer_website_to_space_api_v1_websites__id__transfer__post"];
  };
  "/api/v1/websites/{id}/info-blobs/": {
    /** Get Info Blobs */
    get: operations["get_info_blobs_api_v1_websites__id__info_blobs__get"];
  };
  "/api/v1/templates/apps/": {
    /**
     * Get Templates
     * @description Get all app templates
     */
    get: operations["get_templates_api_v1_templates_apps__get"];
  };
  "/api/v1/templates/assistants/": {
    /**
     * Get Templates
     * @description Get all assistant templates
     */
    get: operations["get_templates_api_v1_templates_assistants__get"];
  };
  "/api/v1/templates/": {
    /**
     * Get Templates
     * @description Get all types of templates
     */
    get: operations["get_templates_api_v1_templates__get"];
  };
  "/api/v1/storage/": {
    /** Get Storage */
    get: operations["get_storage_api_v1_storage__get"];
  };
  "/api/v1/storage/spaces/": {
    /** Get Spaces */
    get: operations["get_spaces_api_v1_storage_spaces__get"];
  };
  "/api/v1/integrations/": {
    /** Get Integrations */
    get: operations["get_integrations_api_v1_integrations__get"];
  };
  "/api/v1/integrations/tenant/": {
    /** Get Tenant Integrations */
    get: operations["get_tenant_integrations_api_v1_integrations_tenant__get"];
  };
  "/api/v1/integrations/me/": {
    /** Get User Integrations */
    get: operations["get_user_integrations_api_v1_integrations_me__get"];
  };
  "/version": {
    /** Get Version */
    get: operations["get_version_version_get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** AcceptedFileType */
    AcceptedFileType: {
      /** Mimetype */
      mimetype: string;
      /** Size Limit */
      size_limit: number;
    };
    /** AccessToken */
    AccessToken: {
      /** Access Token */
      access_token: string;
      /** Token Type */
      token_type: string;
    };
    /** AddSpaceMemberRequest */
    AddSpaceMemberRequest: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      role: components["schemas"]["SpaceRoleValue"];
    };
    /** AdditionalField */
    AdditionalField: {
      type: components["schemas"]["WizardType"];
      /** Value */
      value: {
        [key: string]: string;
      }[];
    };
    /** AllowedOriginPublic */
    AllowedOriginPublic: {
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Url */
      url: string;
    };
    /** ApiKey */
    ApiKey: {
      /** Truncated Key */
      truncated_key: string;
      /** Key */
      key: string;
    };
    /** AppInTemplatePublic */
    AppInTemplatePublic: {
      /** Name */
      name: string;
      completion_model: components["schemas"]["CompletionModelPublicAppTemplate"] | null;
      /** Completion Model Kwargs */
      completion_model_kwargs: Record<string, never>;
      prompt: components["schemas"]["PromptPublicAppTemplate"] | null;
      /** Input Description */
      input_description: string | null;
      /** Input Type */
      input_type: string;
    };
    /** AppPublic */
    AppPublic: {
      /**
       * Permissions
       * @default []
       */
      permissions?: components["schemas"]["ResourcePermission"][];
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /** Description */
      description: string | null;
      /** Input Fields */
      input_fields: components["schemas"]["InputFieldPublic"][];
      /** Attachments */
      attachments: components["schemas"]["FilePublic"][];
      prompt: components["schemas"]["PromptPublic"] | null;
      completion_model: components["schemas"]["CompletionModelSparse"];
      completion_model_kwargs: components["schemas"]["ModelKwargs"];
      allowed_attachments: components["schemas"]["FileRestrictions"];
      /** Published */
      published: boolean;
    };
    /** AppRunInput */
    AppRunInput: {
      /** Files */
      files: components["schemas"]["FilePublic"][];
      /** Text */
      text: string | null;
    };
    /** AppRunPublic */
    AppRunPublic: {
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      input: components["schemas"]["AppRunInput"];
      status: components["schemas"]["Status"];
      /** Finished At */
      finished_at: string | null;
      user: components["schemas"]["UserSparse"];
      /** Output */
      output: string | null;
    };
    /** AppRunSparse */
    AppRunSparse: {
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      input: components["schemas"]["AppRunInput"];
      status: components["schemas"]["Status"];
      /** Finished At */
      finished_at: string | null;
      user: components["schemas"]["UserSparse"];
    };
    /** AppSparse */
    AppSparse: {
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Permissions
       * @default []
       */
      permissions?: components["schemas"]["ResourcePermission"][];
      /** Name */
      name: string;
      /** Description */
      description?: string | null;
      /** Published */
      published: boolean;
      /**
       * User Id
       * Format: uuid
       */
      user_id: string;
    };
    /** AppTemplateListPublic */
    AppTemplateListPublic: {
      /** Items */
      items: components["schemas"]["AppTemplatePublic"][];
      /**
       * Count
       * @description Number of items returned in the response
       */
      count: number;
    };
    /** AppTemplateOrganization */
    AppTemplateOrganization: {
      /** Name */
      name: string;
    };
    /** AppTemplatePublic */
    AppTemplatePublic: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /** Name */
      name: string;
      /** Description */
      description: string | null;
      /** Category */
      category: string;
      app: components["schemas"]["AppInTemplatePublic"];
      /**
       * Type
       * @constant
       * @enum {string}
       */
      type: "app";
      wizard: components["schemas"]["AppTemplateWizard"];
      organization: components["schemas"]["AppTemplateOrganization"];
    };
    /** AppTemplateWizard */
    AppTemplateWizard: {
      attachments: components["schemas"]["TemplateWizard"] | null;
      collections: components["schemas"]["TemplateWizard"] | null;
    };
    /** Applications */
    Applications: {
      assistants: components["schemas"]["PaginatedPermissions_AssistantSparse_"];
      services: components["schemas"]["PaginatedPermissions_ServiceSparse_"];
      apps: components["schemas"]["PaginatedPermissions_AppSparse_"];
    };
    /** AskAnalysis */
    AskAnalysis: {
      /** Question */
      question: string;
      /** Completion Model Id */
      completion_model_id?: string | null;
      /**
       * Stream
       * @default false
       */
      stream?: boolean;
    };
    /** AskAssistant */
    AskAssistant: {
      /** Question */
      question: string;
      /**
       * Files
       * @default []
       */
      files?: components["schemas"]["ModelId"][];
      /**
       * Stream
       * @default false
       */
      stream?: boolean;
      tools?: components["schemas"]["UseTools"] | null;
    };
    /** AskResponse */
    AskResponse: {
      /**
       * Session Id
       * Format: uuid
       */
      session_id: string;
      /** Question */
      question: string;
      /** Files */
      files: components["schemas"]["FilePublic"][];
      /** Answer */
      answer: string;
      /** References */
      references: components["schemas"]["InfoBlobAskAssistantPublic"][];
      model?: components["schemas"]["CompletionModelPublic"] | null;
      tools: components["schemas"]["UseTools"];
    };
    /** AssistantCreatePublic */
    AssistantCreatePublic: {
      /** Name */
      name: string;
      /** @default {} */
      completion_model_kwargs?: components["schemas"]["ModelKwargs"];
      /**
       * Logging Enabled
       * @default false
       */
      logging_enabled?: boolean;
      prompt?: components["schemas"]["PromptCreate"] | null;
      /**
       * Space Id
       * Format: uuid
       */
      space_id: string;
      /**
       * Groups
       * @default []
       */
      groups?: components["schemas"]["ModelId"][];
      /**
       * Websites
       * @default []
       */
      websites?: components["schemas"]["ModelId"][];
      guardrail?: components["schemas"]["AssistantGuard"] | null;
      completion_model: components["schemas"]["ModelId"];
    };
    /** AssistantGuard */
    AssistantGuard: {
      /**
       * Guardrail Active
       * @default true
       */
      guardrail_active?: boolean;
      /**
       * Guardrail String
       * @default
       */
      guardrail_string?: string;
      /**
       * On Fail Message
       * @default Jag kan tyvärr inte svara på det. Fråga gärna något annat!
       */
      on_fail_message?: string;
    };
    /** AssistantInTemplatePublic */
    AssistantInTemplatePublic: {
      /** Name */
      name: string;
      completion_model: components["schemas"]["CompletionModelPublicAssistantTemplate"] | null;
      /**
       * Completion Model Kwargs
       * @default {}
       */
      completion_model_kwargs?: Record<string, never>;
      prompt: components["schemas"]["PromptPublicAssistantTemplate"] | null;
    };
    /** AssistantMetadata */
    AssistantMetadata: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
    };
    /** AssistantPublic */
    AssistantPublic: {
      /**
       * Permissions
       * @default []
       */
      permissions?: components["schemas"]["ResourcePermission"][];
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      prompt?: components["schemas"]["PromptPublic"] | null;
      /**
       * Space Id
       * Format: uuid
       */
      space_id: string;
      completion_model_kwargs: components["schemas"]["ModelKwargs"];
      /** Logging Enabled */
      logging_enabled: boolean;
      /** Attachments */
      attachments: components["schemas"]["FilePublic"][];
      allowed_attachments: components["schemas"]["FileRestrictions"];
      /** Groups */
      groups: components["schemas"]["GroupPublicWithMetadata"][];
      /** Websites */
      websites: components["schemas"]["WebsiteSparse"][];
      completion_model: components["schemas"]["CompletionModelSparse"];
      /**
       * Published
       * @default false
       */
      published?: boolean;
      user: components["schemas"]["UserSparse"];
      tools: components["schemas"]["Tools"];
    };
    /** AssistantSparse */
    AssistantSparse: {
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /** @default {} */
      completion_model_kwargs?: components["schemas"]["ModelKwargs"];
      /**
       * Logging Enabled
       * @default false
       */
      logging_enabled?: boolean;
      /**
       * Permissions
       * @default []
       */
      permissions?: components["schemas"]["ResourcePermission"][];
      /**
       * User Id
       * Format: uuid
       */
      user_id: string;
      /**
       * Published
       * @default false
       */
      published?: boolean;
    };
    /** AssistantTemplateListPublic */
    AssistantTemplateListPublic: {
      /** Items */
      items: components["schemas"]["AssistantTemplatePublic"][];
      /**
       * Count
       * @description Number of items returned in the response
       */
      count: number;
    };
    /** AssistantTemplateOrganization */
    AssistantTemplateOrganization: {
      /** Name */
      name: string;
    };
    /** AssistantTemplatePublic */
    AssistantTemplatePublic: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Category */
      category: string;
      assistant: components["schemas"]["AssistantInTemplatePublic"];
      /**
       * Type
       * @constant
       * @enum {string}
       */
      type: "assistant";
      wizard: components["schemas"]["AssistantTemplateWizard"];
      organization: components["schemas"]["AssistantTemplateOrganization"];
    };
    /** AssistantTemplateWizard */
    AssistantTemplateWizard: {
      attachments: components["schemas"]["TemplateWizard"] | null;
      collections: components["schemas"]["TemplateWizard"] | null;
    };
    /** AttachmentLimits */
    AttachmentLimits: {
      /** Formats */
      formats: components["schemas"]["FormatLimit"][];
      /** Max In Question */
      max_in_question: number;
    };
    /** Body_Login_api_v1_users_login_token__post */
    Body_Login_api_v1_users_login_token__post: {
      /** Grant Type */
      grant_type?: string | null;
      /** Username */
      username: string;
      /** Password */
      password: string;
      /**
       * Scope
       * @default
       */
      scope?: string;
      /** Client Id */
      client_id?: string | null;
      /** Client Secret */
      client_secret?: string | null;
    };
    /** Body_upload_file_api_v1_files__post */
    Body_upload_file_api_v1_files__post: {
      /**
       * Upload File
       * Format: binary
       */
      upload_file: string;
    };
    /** Body_upload_file_api_v1_groups__id__info_blobs_upload__post */
    Body_upload_file_api_v1_groups__id__info_blobs_upload__post: {
      /**
       * File
       * Format: binary
       */
      file: string;
    };
    /** CompletionModel */
    CompletionModel: {
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /** Nickname */
      nickname: string;
      family: components["schemas"]["CompletionModelFamily"];
      /** Token Limit */
      token_limit: number;
      /** Is Deprecated */
      is_deprecated: boolean;
      /** Nr Billion Parameters */
      nr_billion_parameters?: number | null;
      /** Hf Link */
      hf_link?: string | null;
      stability: components["schemas"]["ModelStability"];
      hosting: components["schemas"]["ModelHostingLocation"];
      /** Open Source */
      open_source?: boolean | null;
      /** Description */
      description?: string | null;
      /** Deployment Name */
      deployment_name?: string | null;
      org?: components["schemas"]["Orgs"] | null;
      /** Vision */
      vision: boolean;
      /**
       * Is Org Enabled
       * @default false
       */
      is_org_enabled?: boolean;
      /**
       * Is Org Default
       * @default false
       */
      is_org_default?: boolean;
      /** Security Level Id */
      security_level_id?: string | null;
    };
    /**
     * CompletionModelFamily
     * @enum {string}
     */
    CompletionModelFamily: "openai" | "mistral" | "vllm" | "claude" | "azure";
    /** CompletionModelPublic */
    CompletionModelPublic: {
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /** Nickname */
      nickname: string;
      family: components["schemas"]["CompletionModelFamily"];
      /** Token Limit */
      token_limit: number;
      /** Is Deprecated */
      is_deprecated: boolean;
      /** Nr Billion Parameters */
      nr_billion_parameters?: number | null;
      /** Hf Link */
      hf_link?: string | null;
      stability: components["schemas"]["ModelStability"];
      hosting: components["schemas"]["ModelHostingLocation"];
      /** Open Source */
      open_source?: boolean | null;
      /** Description */
      description?: string | null;
      /** Deployment Name */
      deployment_name?: string | null;
      org?: components["schemas"]["Orgs"] | null;
      /** Vision */
      vision: boolean;
      /**
       * Is Org Enabled
       * @default false
       */
      is_org_enabled?: boolean;
      /**
       * Is Org Default
       * @default false
       */
      is_org_default?: boolean;
      /** Security Level Id */
      security_level_id?: string | null;
      /**
       * Can Access
       * @default false
       */
      can_access?: boolean;
      /**
       * Is Locked
       * @default true
       */
      is_locked?: boolean;
      security_level?: components["schemas"]["SecurityLevelPublic"] | null;
    };
    /** CompletionModelPublicAppTemplate */
    CompletionModelPublicAppTemplate: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
    };
    /** CompletionModelPublicAssistantTemplate */
    CompletionModelPublicAssistantTemplate: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
    };
    /** CompletionModelSparse */
    CompletionModelSparse: {
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /** Nickname */
      nickname: string;
      family: components["schemas"]["CompletionModelFamily"];
      /** Token Limit */
      token_limit: number;
      /** Is Deprecated */
      is_deprecated: boolean;
      /** Nr Billion Parameters */
      nr_billion_parameters?: number | null;
      /** Hf Link */
      hf_link?: string | null;
      stability: components["schemas"]["ModelStability"];
      hosting: components["schemas"]["ModelHostingLocation"];
      /** Open Source */
      open_source?: boolean | null;
      /** Description */
      description?: string | null;
      /** Deployment Name */
      deployment_name?: string | null;
      org?: components["schemas"]["Orgs"] | null;
      /** Vision */
      vision: boolean;
    };
    /** CompletionModelUpdateFlags */
    CompletionModelUpdateFlags: {
      /** Is Org Enabled */
      is_org_enabled?: boolean | null;
      /** Is Org Default */
      is_org_default?: boolean | null;
      /** Security Level Id */
      security_level_id?: string | null;
    };
    /** Counts */
    Counts: {
      /** Assistants */
      assistants: number;
      /** Sessions */
      sessions: number;
      /** Questions */
      questions: number;
    };
    /** CrawlRunPublic */
    CrawlRunPublic: {
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Pages Crawled */
      pages_crawled?: number | null;
      /** Files Downloaded */
      files_downloaded?: number | null;
      /** Pages Failed */
      pages_failed?: number | null;
      /** Files Failed */
      files_failed?: number | null;
      /** @default queued */
      status?: components["schemas"]["Status"] | null;
      /** Result Location */
      result_location?: string | null;
      /** Finished At */
      finished_at?: string | null;
    };
    /** CrawlRunSparse */
    CrawlRunSparse: {
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Pages Crawled */
      pages_crawled?: number | null;
      /** Files Downloaded */
      files_downloaded?: number | null;
      /** Pages Failed */
      pages_failed?: number | null;
      /** Files Failed */
      files_failed?: number | null;
      /** @default queued */
      status?: components["schemas"]["Status"] | null;
      /** Result Location */
      result_location?: string | null;
      /** Finished At */
      finished_at?: string | null;
    };
    /**
     * CrawlType
     * @enum {string}
     */
    CrawlType: "crawl" | "sitemap";
    /** CreateGroupRequest */
    CreateGroupRequest: {
      /** Name */
      name: string;
      embedding_model: components["schemas"]["ModelId"];
    };
    /** CreateSpaceAppRequest */
    CreateSpaceAppRequest: {
      /** Name */
      name: string;
      /** Security Level Id */
      security_level_id?: string | null;
      from_template?: components["schemas"]["TemplateCreate"] | null;
    };
    /** CreateSpaceAssistantRequest */
    CreateSpaceAssistantRequest: {
      /** Name */
      name: string;
      /** Security Level Id */
      security_level_id?: string | null;
      from_template?: components["schemas"]["TemplateCreate"] | null;
    };
    /** CreateSpaceGroupsRequest */
    CreateSpaceGroupsRequest: {
      /** Name */
      name: string;
      /** Security Level Id */
      security_level_id?: string | null;
      embedding_model?: components["schemas"]["ModelId"] | null;
    };
    /** CreateSpaceGroupsResponse */
    CreateSpaceGroupsResponse: {
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      embedding_model: components["schemas"]["EmbeddingModelSparse"] | null;
      metadata: components["schemas"]["GroupMetadata"];
    };
    /** CreateSpaceRequest */
    CreateSpaceRequest: {
      /** Name */
      name: string;
      /** Security Level Id */
      security_level_id?: string | null;
    };
    /** CreateSpaceServiceRequest */
    CreateSpaceServiceRequest: {
      /** Name */
      name: string;
      /** Security Level Id */
      security_level_id?: string | null;
    };
    /** CreateSpaceServiceResponse */
    CreateSpaceServiceResponse: {
      /**
       * Permissions
       * @default []
       */
      permissions?: components["schemas"]["ResourcePermission"][];
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /** Prompt */
      prompt: string;
      completion_model_kwargs: components["schemas"]["ModelKwargs"];
      /** Output Format */
      output_format?: ("json" | "list" | "boolean") | null;
      /** Json Schema */
      json_schema?: Record<string, never> | null;
      /** Groups */
      groups: components["schemas"]["GroupPublicWithMetadata"][];
      completion_model: components["schemas"]["CompletionModelSparse"] | null;
      /**
       * Published
       * @default false
       */
      published?: boolean;
      user: components["schemas"]["UserSparse"];
    };
    /** CreateSpaceWebsitesRequest */
    CreateSpaceWebsitesRequest: {
      /** Name */
      name?: string | null;
      /** Url */
      url: string;
      /**
       * Download Files
       * @default false
       */
      download_files?: boolean;
      /** @default crawl */
      crawl_type?: components["schemas"]["CrawlType"];
      /** @default never */
      update_interval?: components["schemas"]["UpdateInterval"];
      embedding_model?: components["schemas"]["ModelId"] | null;
    };
    /** CreateSpaceWebsitesResponse */
    CreateSpaceWebsitesResponse: {
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name?: string | null;
      /** Url */
      url: string;
      /** Download Files */
      download_files: boolean;
      crawl_type: components["schemas"]["CrawlType"];
      update_interval: components["schemas"]["UpdateInterval"];
      embedding_model: components["schemas"]["EmbeddingModelSparse"] | null;
      latest_crawl: components["schemas"]["CrawlRunPublic"] | null;
      metadata: components["schemas"]["WebsiteMetadata"];
    };
    /** CursorPaginatedResponse[SessionMetadataPublic] */
    CursorPaginatedResponse_SessionMetadataPublic_: {
      /**
       * Items
       * @description List of items returned in the response
       */
      items: components["schemas"]["SessionMetadataPublic"][];
      /** Limit */
      limit?: number | null;
      /** Next Cursor */
      next_cursor?: string | null;
      /** Previous Cursor */
      previous_cursor?: string | null;
      /** Total Count */
      total_count: number;
      /**
       * Count
       * @description Number of items returned in the response
       */
      count: number;
    };
    /** CursorPaginatedResponse[UserSparse] */
    CursorPaginatedResponse_UserSparse_: {
      /**
       * Items
       * @description List of items returned in the response
       */
      items: components["schemas"]["UserSparse"][];
      /** Limit */
      limit?: number | null;
      /** Next Cursor */
      next_cursor?: string | null;
      /** Previous Cursor */
      previous_cursor?: string | null;
      /** Total Count */
      total_count: number;
      /**
       * Count
       * @description Number of items returned in the response
       */
      count: number;
    };
    /** Dashboard */
    Dashboard: {
      spaces: components["schemas"]["PaginatedResponse_SpaceDashboard_"];
    };
    /** DefaultAssistant */
    DefaultAssistant: {
      /**
       * Permissions
       * @default []
       */
      permissions?: components["schemas"]["ResourcePermission"][];
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      prompt?: components["schemas"]["PromptPublic"] | null;
      /**
       * Space Id
       * Format: uuid
       */
      space_id: string;
      completion_model_kwargs: components["schemas"]["ModelKwargs"];
      /** Logging Enabled */
      logging_enabled: boolean;
      /** Attachments */
      attachments: components["schemas"]["FilePublic"][];
      allowed_attachments: components["schemas"]["FileRestrictions"];
      /** Groups */
      groups: components["schemas"]["GroupPublicWithMetadata"][];
      /** Websites */
      websites: components["schemas"]["WebsiteSparse"][];
      completion_model?: components["schemas"]["CompletionModelSparse"] | null;
      /**
       * Published
       * @default false
       */
      published?: boolean;
      user: components["schemas"]["UserSparse"];
      tools: components["schemas"]["Tools"];
    };
    /** DeleteGroupResponse */
    DeleteGroupResponse: {
      /**
       * Permissions
       * @default []
       */
      permissions?: components["schemas"]["ResourcePermission"][];
      /** Name */
      name: string;
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      embedding_model: components["schemas"]["EmbeddingModelPublic"];
      deletion_info: components["schemas"]["DeletionInfo"];
    };
    /** DeleteResponse */
    DeleteResponse: {
      /** Success */
      success: boolean;
    };
    /** DeletionInfo */
    DeletionInfo: {
      /** Success */
      success: boolean;
    };
    /**
     * EmbeddingModelFamily
     * @enum {string}
     */
    EmbeddingModelFamily: "openai" | "mini_lm" | "e5";
    /** EmbeddingModelPublic */
    EmbeddingModelPublic: {
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      family: components["schemas"]["EmbeddingModelFamily"];
      /** Is Deprecated */
      is_deprecated: boolean;
      /** Open Source */
      open_source: boolean;
      /** Dimensions */
      dimensions?: number | null;
      /** Max Input */
      max_input?: number | null;
      /** Hf Link */
      hf_link?: string | null;
      stability: components["schemas"]["ModelStability"];
      hosting: components["schemas"]["ModelHostingLocation"];
      /** Description */
      description?: string | null;
      org?: components["schemas"]["Orgs"] | null;
      /**
       * Is Org Enabled
       * @default false
       */
      is_org_enabled?: boolean;
      /** Security Level Id */
      security_level_id?: string | null;
      /**
       * Can Access
       * @default false
       */
      can_access?: boolean;
      /**
       * Is Locked
       * @default true
       */
      is_locked?: boolean;
      security_level?: components["schemas"]["SecurityLevelPublic"] | null;
    };
    /** EmbeddingModelPublicBase */
    EmbeddingModelPublicBase: {
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      family: components["schemas"]["EmbeddingModelFamily"];
      /** Is Deprecated */
      is_deprecated: boolean;
      /** Open Source */
      open_source: boolean;
      /** Dimensions */
      dimensions?: number | null;
      /** Max Input */
      max_input?: number | null;
      /** Hf Link */
      hf_link?: string | null;
      stability: components["schemas"]["ModelStability"];
      hosting: components["schemas"]["ModelHostingLocation"];
      /** Description */
      description?: string | null;
      org?: components["schemas"]["Orgs"] | null;
    };
    /** EmbeddingModelSparse */
    EmbeddingModelSparse: {
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      family: components["schemas"]["EmbeddingModelFamily"];
      /** Is Deprecated */
      is_deprecated: boolean;
      /** Open Source */
      open_source: boolean;
      /** Dimensions */
      dimensions?: number | null;
      /** Max Input */
      max_input?: number | null;
      /** Hf Link */
      hf_link?: string | null;
      stability: components["schemas"]["ModelStability"];
      hosting: components["schemas"]["ModelHostingLocation"];
      /** Description */
      description?: string | null;
      org?: components["schemas"]["Orgs"] | null;
    };
    /** EmbeddingModelUpdateFlags */
    EmbeddingModelUpdateFlags: {
      /**
       * Is Org Enabled
       * @default false
       */
      is_org_enabled?: boolean | null;
      /** Security Level Id */
      security_level_id?: string | null;
    };
    /**
     * ErrorCodes
     * @enum {integer}
     */
    ErrorCodes:
      | 9000
      | 9001
      | 9002
      | 9003
      | 9004
      | 9005
      | 9006
      | 9007
      | 9008
      | 9009
      | 9010
      | 9011
      | 9012
      | 9013
      | 9014
      | 9015
      | 9016
      | 9017
      | 9018
      | 9019
      | 9020
      | 9021;
    /** FilePublic */
    FilePublic: {
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /** Mimetype */
      mimetype: string;
      /** Size */
      size: number;
    };
    /** FileRestrictions */
    FileRestrictions: {
      /** Accepted File Types */
      accepted_file_types: components["schemas"]["AcceptedFileType"][];
      limit: components["schemas"]["Limit"];
    };
    /** FormatLimit */
    FormatLimit: {
      /** Mimetype */
      mimetype: string;
      /** Size */
      size: number;
      /** Extensions */
      extensions: string[];
      /** Vision */
      vision: boolean;
    };
    /** GeneralError */
    GeneralError: {
      /** Message */
      message: string;
      intric_error_code: components["schemas"]["ErrorCodes"];
    };
    /** GetModelsResponse */
    GetModelsResponse: {
      /** Completion Models */
      completion_models: components["schemas"]["CompletionModelPublic"][];
      /** Embedding Models */
      embedding_models: components["schemas"]["EmbeddingModelPublic"][];
    };
    /** GroupMetadata */
    GroupMetadata: {
      /** Num Info Blobs */
      num_info_blobs: number;
      /** Size */
      size: number;
    };
    /** GroupPublicBase */
    GroupPublicBase: {
      /** Name */
      name: string;
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
    };
    /** GroupPublicWithMetadata */
    GroupPublicWithMetadata: {
      /**
       * Permissions
       * @default []
       */
      permissions?: components["schemas"]["ResourcePermission"][];
      /** Name */
      name: string;
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      embedding_model: components["schemas"]["EmbeddingModelPublic"];
      metadata: components["schemas"]["GroupMetadata"];
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** IdAndName */
    IdAndName: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
    };
    /** InfoBlobAddPublic */
    InfoBlobAddPublic: {
      /** Text */
      text: string;
      metadata?: components["schemas"]["InfoBlobMetadataUpsertPublic"];
    };
    /** InfoBlobAskAssistantPublic */
    InfoBlobAskAssistantPublic: {
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      metadata: components["schemas"]["InfoBlobMetadata"];
      /** Group Id */
      group_id?: string | null;
      /** Website Id */
      website_id?: string | null;
      /** Score */
      score: number;
    };
    /** InfoBlobLimits */
    InfoBlobLimits: {
      /** Formats */
      formats: components["schemas"]["FormatLimit"][];
    };
    /** InfoBlobMetadata */
    InfoBlobMetadata: {
      /** Url */
      url?: string | null;
      /** Title */
      title?: string | null;
      /**
       * Embedding Model Id
       * Format: uuid
       */
      embedding_model_id: string;
      /** Size */
      size: number;
    };
    /** InfoBlobMetadataUpsertPublic */
    InfoBlobMetadataUpsertPublic: {
      /** Url */
      url?: string | null;
      /** Title */
      title?: string | null;
    };
    /** InfoBlobPublic */
    InfoBlobPublic: {
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      metadata: components["schemas"]["InfoBlobMetadata"];
      /** Group Id */
      group_id?: string | null;
      /** Website Id */
      website_id?: string | null;
      /** Text */
      text: string;
    };
    /** InfoBlobPublicNoText */
    InfoBlobPublicNoText: {
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      metadata: components["schemas"]["InfoBlobMetadata"];
      /** Group Id */
      group_id?: string | null;
      /** Website Id */
      website_id?: string | null;
    };
    /** InfoBlobUpdatePublic */
    InfoBlobUpdatePublic: {
      metadata: components["schemas"]["InfoBlobMetadataUpsertPublic"];
    };
    /** InfoBlobUpsertRequest */
    InfoBlobUpsertRequest: {
      /** Info Blobs */
      info_blobs: components["schemas"]["InfoBlobAddPublic"][];
    };
    /** InputField */
    InputField: {
      type: components["schemas"]["InputFieldType"];
      /** Description */
      description?: string | null;
    };
    /** InputFieldPublic */
    InputFieldPublic: {
      /** Accepted File Types */
      accepted_file_types: components["schemas"]["AcceptedFileType"][];
      limit: components["schemas"]["Limit"];
      type: components["schemas"]["InputFieldType"];
      /** Description */
      description?: string | null;
    };
    /**
     * InputFieldType
     * @enum {string}
     */
    InputFieldType:
      | "text-field"
      | "text-upload"
      | "audio-upload"
      | "audio-recorder"
      | "image-upload";
    /** Integration */
    Integration: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
    };
    /** IntegrationList */
    IntegrationList: {
      /** Items */
      items: components["schemas"]["Integration"][];
      /** Count */
      count: number;
    };
    /** JobPublic */
    JobPublic: {
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name?: string | null;
      status: components["schemas"]["Status"];
      task: components["schemas"]["Task"];
      /** Result Location */
      result_location?: string | null;
      /** Finished At */
      finished_at?: string | null;
    };
    /** Knowledge */
    Knowledge: {
      groups: components["schemas"]["PaginatedPermissions_GroupPublicWithMetadata_"];
      websites: components["schemas"]["PaginatedPermissions_WebsiteSparse_"];
    };
    /** Limit */
    Limit: {
      /** Max Files */
      max_files: number;
      /** Max Size */
      max_size: number;
    };
    /** Limits */
    Limits: {
      info_blobs: components["schemas"]["InfoBlobLimits"];
      attachments: components["schemas"]["AttachmentLimits"];
    };
    /** LoggingDetailsPublic */
    LoggingDetailsPublic: {
      /** Context */
      context?: string | null;
      /** Model Kwargs */
      model_kwargs: Record<string, never>;
      /** Json Body */
      json_body: unknown;
    };
    /** Message */
    Message: {
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Question */
      question: string;
      /** Answer */
      answer: string;
      completion_model?: components["schemas"]["CompletionModel"] | null;
      /** References */
      references: components["schemas"]["InfoBlobPublicNoText"][];
      /** Files */
      files: components["schemas"]["FilePublic"][];
      tools: components["schemas"]["UseTools"];
    };
    /** MessageLogging */
    MessageLogging: {
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Question */
      question: string;
      /** Answer */
      answer: string;
      completion_model?: components["schemas"]["CompletionModel"] | null;
      /** References */
      references: components["schemas"]["InfoBlobPublicNoText"][];
      /** Files */
      files: components["schemas"]["FilePublic"][];
      tools: components["schemas"]["UseTools"];
      logging_details: components["schemas"]["LoggingDetailsPublic"];
    };
    /** MetadataStatistics */
    MetadataStatistics: {
      /** Assistants */
      assistants: components["schemas"]["AssistantMetadata"][];
      /** Sessions */
      sessions: components["schemas"]["SessionMetadata"][];
      /** Questions */
      questions: components["schemas"]["QuestionMetadata"][];
    };
    /**
     * ModelHostingLocation
     * @enum {string}
     */
    ModelHostingLocation: "usa" | "eu" | "swe";
    /** ModelId */
    ModelId: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
    };
    /** ModelKwargs */
    ModelKwargs: {
      /** Temperature */
      temperature?: number | null;
      /** Top P */
      top_p?: number | null;
    };
    /**
     * ModelStability
     * @enum {string}
     */
    ModelStability: "stable" | "experimental";
    /** OpenIdConnectLogin */
    OpenIdConnectLogin: {
      /** Code */
      code: string;
      /** Code Verifier */
      code_verifier: string;
      /** Redirect Uri */
      redirect_uri: string;
      /**
       * Client Id
       * @default intric
       */
      client_id?: string;
      /**
       * Grant Type
       * @default authorization_code
       */
      grant_type?: string;
      /**
       * Scope
       * @default openid
       */
      scope?: string;
      /** Nonce */
      nonce?: string;
    };
    /**
     * Orgs
     * @enum {string}
     */
    Orgs: "OpenAI" | "Meta" | "Microsoft" | "Anthropic";
    /** PaginatedPermissions[AppSparse] */
    PaginatedPermissions_AppSparse_: {
      /**
       * Permissions
       * @default []
       */
      permissions?: components["schemas"]["ResourcePermission"][];
      /**
       * Items
       * @description List of items returned in the response
       */
      items: components["schemas"]["AppSparse"][];
      /**
       * Count
       * @description Number of items returned in the response
       */
      count: number;
    };
    /** PaginatedPermissions[AssistantSparse] */
    PaginatedPermissions_AssistantSparse_: {
      /**
       * Permissions
       * @default []
       */
      permissions?: components["schemas"]["ResourcePermission"][];
      /**
       * Items
       * @description List of items returned in the response
       */
      items: components["schemas"]["AssistantSparse"][];
      /**
       * Count
       * @description Number of items returned in the response
       */
      count: number;
    };
    /** PaginatedPermissions[GroupPublicWithMetadata] */
    PaginatedPermissions_GroupPublicWithMetadata_: {
      /**
       * Permissions
       * @default []
       */
      permissions?: components["schemas"]["ResourcePermission"][];
      /**
       * Items
       * @description List of items returned in the response
       */
      items: components["schemas"]["GroupPublicWithMetadata"][];
      /**
       * Count
       * @description Number of items returned in the response
       */
      count: number;
    };
    /** PaginatedPermissions[ServiceSparse] */
    PaginatedPermissions_ServiceSparse_: {
      /**
       * Permissions
       * @default []
       */
      permissions?: components["schemas"]["ResourcePermission"][];
      /**
       * Items
       * @description List of items returned in the response
       */
      items: components["schemas"]["ServiceSparse"][];
      /**
       * Count
       * @description Number of items returned in the response
       */
      count: number;
    };
    /** PaginatedPermissions[SpaceMember] */
    PaginatedPermissions_SpaceMember_: {
      /**
       * Permissions
       * @default []
       */
      permissions?: components["schemas"]["ResourcePermission"][];
      /**
       * Items
       * @description List of items returned in the response
       */
      items: components["schemas"]["SpaceMember"][];
      /**
       * Count
       * @description Number of items returned in the response
       */
      count: number;
    };
    /** PaginatedPermissions[WebsiteSparse] */
    PaginatedPermissions_WebsiteSparse_: {
      /**
       * Permissions
       * @default []
       */
      permissions?: components["schemas"]["ResourcePermission"][];
      /**
       * Items
       * @description List of items returned in the response
       */
      items: components["schemas"]["WebsiteSparse"][];
      /**
       * Count
       * @description Number of items returned in the response
       */
      count: number;
    };
    /** PaginatedResponse[AllowedOriginPublic] */
    PaginatedResponse_AllowedOriginPublic_: {
      /**
       * Items
       * @description List of items returned in the response
       */
      items: components["schemas"]["AllowedOriginPublic"][];
      /**
       * Count
       * @description Number of items returned in the response
       */
      count: number;
    };
    /** PaginatedResponse[AppRunSparse] */
    PaginatedResponse_AppRunSparse_: {
      /**
       * Items
       * @description List of items returned in the response
       */
      items: components["schemas"]["AppRunSparse"][];
      /**
       * Count
       * @description Number of items returned in the response
       */
      count: number;
    };
    /** PaginatedResponse[AssistantPublic] */
    PaginatedResponse_AssistantPublic_: {
      /**
       * Items
       * @description List of items returned in the response
       */
      items: components["schemas"]["AssistantPublic"][];
      /**
       * Count
       * @description Number of items returned in the response
       */
      count: number;
    };
    /** PaginatedResponse[CompletionModelPublic] */
    PaginatedResponse_CompletionModelPublic_: {
      /**
       * Items
       * @description List of items returned in the response
       */
      items: components["schemas"]["CompletionModelPublic"][];
      /**
       * Count
       * @description Number of items returned in the response
       */
      count: number;
    };
    /** PaginatedResponse[CrawlRunPublic] */
    PaginatedResponse_CrawlRunPublic_: {
      /**
       * Items
       * @description List of items returned in the response
       */
      items: components["schemas"]["CrawlRunPublic"][];
      /**
       * Count
       * @description Number of items returned in the response
       */
      count: number;
    };
    /** PaginatedResponse[EmbeddingModelPublic] */
    PaginatedResponse_EmbeddingModelPublic_: {
      /**
       * Items
       * @description List of items returned in the response
       */
      items: components["schemas"]["EmbeddingModelPublic"][];
      /**
       * Count
       * @description Number of items returned in the response
       */
      count: number;
    };
    /** PaginatedResponse[FilePublic] */
    PaginatedResponse_FilePublic_: {
      /**
       * Items
       * @description List of items returned in the response
       */
      items: components["schemas"]["FilePublic"][];
      /**
       * Count
       * @description Number of items returned in the response
       */
      count: number;
    };
    /** PaginatedResponse[GroupPublicWithMetadata] */
    PaginatedResponse_GroupPublicWithMetadata_: {
      /**
       * Items
       * @description List of items returned in the response
       */
      items: components["schemas"]["GroupPublicWithMetadata"][];
      /**
       * Count
       * @description Number of items returned in the response
       */
      count: number;
    };
    /** PaginatedResponse[InfoBlobPublicNoText] */
    PaginatedResponse_InfoBlobPublicNoText_: {
      /**
       * Items
       * @description List of items returned in the response
       */
      items: components["schemas"]["InfoBlobPublicNoText"][];
      /**
       * Count
       * @description Number of items returned in the response
       */
      count: number;
    };
    /** PaginatedResponse[InfoBlobPublic] */
    PaginatedResponse_InfoBlobPublic_: {
      /**
       * Items
       * @description List of items returned in the response
       */
      items: components["schemas"]["InfoBlobPublic"][];
      /**
       * Count
       * @description Number of items returned in the response
       */
      count: number;
    };
    /** PaginatedResponse[JobPublic] */
    PaginatedResponse_JobPublic_: {
      /**
       * Items
       * @description List of items returned in the response
       */
      items: components["schemas"]["JobPublic"][];
      /**
       * Count
       * @description Number of items returned in the response
       */
      count: number;
    };
    /** PaginatedResponse[Message] */
    PaginatedResponse_Message_: {
      /**
       * Items
       * @description List of items returned in the response
       */
      items: components["schemas"]["Message"][];
      /**
       * Count
       * @description Number of items returned in the response
       */
      count: number;
    };
    /** PaginatedResponse[PromptSparse] */
    PaginatedResponse_PromptSparse_: {
      /**
       * Items
       * @description List of items returned in the response
       */
      items: components["schemas"]["PromptSparse"][];
      /**
       * Count
       * @description Number of items returned in the response
       */
      count: number;
    };
    /** PaginatedResponse[SemanticSearchResponse] */
    PaginatedResponse_SemanticSearchResponse_: {
      /**
       * Items
       * @description List of items returned in the response
       */
      items: components["schemas"]["SemanticSearchResponse"][];
      /**
       * Count
       * @description Number of items returned in the response
       */
      count: number;
    };
    /** PaginatedResponse[ServicePublicWithUser] */
    PaginatedResponse_ServicePublicWithUser_: {
      /**
       * Items
       * @description List of items returned in the response
       */
      items: components["schemas"]["ServicePublicWithUser"][];
      /**
       * Count
       * @description Number of items returned in the response
       */
      count: number;
    };
    /** PaginatedResponse[ServiceRun] */
    PaginatedResponse_ServiceRun_: {
      /**
       * Items
       * @description List of items returned in the response
       */
      items: components["schemas"]["ServiceRun"][];
      /**
       * Count
       * @description Number of items returned in the response
       */
      count: number;
    };
    /** PaginatedResponse[SpaceDashboard] */
    PaginatedResponse_SpaceDashboard_: {
      /**
       * Items
       * @description List of items returned in the response
       */
      items: components["schemas"]["SpaceDashboard"][];
      /**
       * Count
       * @description Number of items returned in the response
       */
      count: number;
    };
    /** PaginatedResponse[SpaceSparse] */
    PaginatedResponse_SpaceSparse_: {
      /**
       * Items
       * @description List of items returned in the response
       */
      items: components["schemas"]["SpaceSparse"][];
      /**
       * Count
       * @description Number of items returned in the response
       */
      count: number;
    };
    /** PaginatedResponse[UserAdminView] */
    PaginatedResponse_UserAdminView_: {
      /**
       * Items
       * @description List of items returned in the response
       */
      items: components["schemas"]["UserAdminView"][];
      /**
       * Count
       * @description Number of items returned in the response
       */
      count: number;
    };
    /** PaginatedResponse[UserGroupPublic] */
    PaginatedResponse_UserGroupPublic_: {
      /**
       * Items
       * @description List of items returned in the response
       */
      items: components["schemas"]["UserGroupPublic"][];
      /**
       * Count
       * @description Number of items returned in the response
       */
      count: number;
    };
    /** PaginatedResponse[WebsitePublic] */
    PaginatedResponse_WebsitePublic_: {
      /**
       * Items
       * @description List of items returned in the response
       */
      items: components["schemas"]["WebsitePublic"][];
      /**
       * Count
       * @description Number of items returned in the response
       */
      count: number;
    };
    /** PaginatedResponse[str] */
    PaginatedResponse_str_: {
      /**
       * Items
       * @description List of items returned in the response
       */
      items: string[];
      /**
       * Count
       * @description Number of items returned in the response
       */
      count: number;
    };
    /** PartialAppUpdateRequest */
    PartialAppUpdateRequest: {
      /** Name */
      name?: string | null;
      /** Description */
      description?: string | null;
      /** Input Fields */
      input_fields?: components["schemas"]["InputField"][] | null;
      /** Attachments */
      attachments?: components["schemas"]["ModelId"][] | null;
      prompt?: components["schemas"]["PromptCreate"] | null;
      completion_model?: components["schemas"]["ModelId"] | null;
      completion_model_kwargs?: components["schemas"]["ModelKwargs"] | null;
    };
    /** PartialAssistantUpdatePublic */
    PartialAssistantUpdatePublic: {
      /** Name */
      name?: string | null;
      completion_model_kwargs?: components["schemas"]["ModelKwargs"] | null;
      /** Logging Enabled */
      logging_enabled?: boolean | null;
      prompt?: components["schemas"]["PromptCreate"] | null;
      /** Space Id */
      space_id?: string | null;
      /** Groups */
      groups?: components["schemas"]["ModelId"][] | null;
      /** Websites */
      websites?: components["schemas"]["ModelId"][] | null;
      guardrail?: components["schemas"]["AssistantGuard"] | null;
      completion_model?: components["schemas"]["ModelId"] | null;
      /** Attachments */
      attachments?: components["schemas"]["ModelId"][] | null;
    };
    /** PartialGroupUpdatePublic */
    PartialGroupUpdatePublic: {
      /** Name */
      name?: string | null;
    };
    /** PartialPropUserUpdate */
    PartialPropUserUpdate: {
      predefined_role?: components["schemas"]["ModelId"] | null;
      state?: components["schemas"]["UserState"] | null;
    };
    /** PartialSecurityLevelUpdatePublic */
    PartialSecurityLevelUpdatePublic: {
      /**
       * Name
       * @description Name of the security level
       */
      name?: string | null;
      /**
       * Description
       * @description Description of the security level
       */
      description?: string | null;
      /**
       * Value
       * @description Numeric value determining the security level hierarchy
       */
      value?: number | null;
    };
    /** PartialServiceUpdatePublic */
    PartialServiceUpdatePublic: {
      /** Output Format */
      output_format?: ("json" | "list" | "boolean") | null;
      /** Json Schema */
      json_schema?: Record<string, never> | null;
      /** Name */
      name?: string | null;
      /** Prompt */
      prompt?: string | null;
      completion_model_kwargs?: components["schemas"]["ModelKwargs"] | null;
      /** Groups */
      groups?: components["schemas"]["ModelId"][] | null;
      completion_model?: components["schemas"]["ModelId"] | null;
    };
    /** PartialUpdateSpaceRequest */
    PartialUpdateSpaceRequest: {
      /** Name */
      name?: string | null;
      /** Description */
      description?: string | null;
      /** Security Level Id */
      security_level_id?: string | null;
      /** Embedding Models */
      embedding_models?: components["schemas"]["ModelId"][] | null;
      /** Completion Models */
      completion_models?: components["schemas"]["ModelId"][] | null;
    };
    /** PartialWebsiteUpdateRequest */
    PartialWebsiteUpdateRequest: {
      /** Name */
      name?: string | null;
      /** Url */
      url?: string | null;
      /** Space Id */
      space_id?: string | null;
      /** Download Files */
      download_files?: boolean | null;
      crawl_type?: components["schemas"]["CrawlType"] | null;
      update_interval?: components["schemas"]["UpdateInterval"] | null;
      embedding_model?: components["schemas"]["ModelId"] | null;
    };
    /**
     * Permission
     * @enum {string}
     */
    Permission:
      | "assistants"
      | "apps"
      | "services"
      | "collections"
      | "insights"
      | "AI"
      | "editor"
      | "admin"
      | "websites";
    /** PredefinedRolePublic */
    PredefinedRolePublic: {
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /** Name */
      name: string;
      /** Permissions */
      permissions: components["schemas"]["Permission"][];
      /**
       * Id
       * Format: uuid
       */
      id: string;
    };
    /** PrivacyPolicy */
    PrivacyPolicy: {
      /** Url */
      url?: string | null;
    };
    /** PromptCreate */
    PromptCreate: {
      /** Text */
      text: string;
      /** Description */
      description?: string | null;
    };
    /** PromptPublic */
    PromptPublic: {
      /**
       * Permissions
       * @default []
       */
      permissions?: components["schemas"]["ResourcePermission"][];
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Description */
      description?: string | null;
      /** Is Selected */
      is_selected?: boolean | null;
      user: components["schemas"]["UserSparse"];
      /** Text */
      text: string;
    };
    /** PromptPublicAppTemplate */
    PromptPublicAppTemplate: {
      /** Text */
      text: string | null;
    };
    /** PromptPublicAssistantTemplate */
    PromptPublicAssistantTemplate: {
      /** Text */
      text: string | null;
    };
    /** PromptSparse */
    PromptSparse: {
      /**
       * Permissions
       * @default []
       */
      permissions?: components["schemas"]["ResourcePermission"][];
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Description */
      description?: string | null;
      /** Is Selected */
      is_selected: boolean;
      user: components["schemas"]["UserSparse"];
    };
    /** PropUserInvite */
    PropUserInvite: {
      predefined_role?: components["schemas"]["ModelId"] | null;
      state?: components["schemas"]["UserState"] | null;
      /**
       * Email
       * Format: email
       */
      email: string;
    };
    /** QuestionMetadata */
    QuestionMetadata: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Assistant Id
       * Format: uuid
       */
      assistant_id: string;
      /**
       * Session Id
       * Format: uuid
       */
      session_id: string;
    };
    /**
     * ResourcePermission
     * @enum {string}
     */
    ResourcePermission: "read" | "create" | "edit" | "delete" | "add" | "remove" | "publish";
    /** RolePublic */
    RolePublic: {
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /** Permissions */
      permissions: components["schemas"]["Permission"][];
    };
    /** RunAppRequest */
    RunAppRequest: {
      /**
       * Files
       * @default []
       */
      files?: components["schemas"]["ModelId"][];
      /** Text */
      text?: string | null;
    };
    /** RunService */
    RunService: {
      /** Input */
      input: string;
      /**
       * Files
       * @default []
       */
      files?: components["schemas"]["ModelId"][];
    };
    /**
     * SecurityLevelCreatePublic
     * @description Request model for creating a new security level.
     */
    SecurityLevelCreatePublic: {
      /**
       * Name
       * @description Name of the security level
       */
      name: string;
      /**
       * Description
       * @description Description of the security level
       */
      description?: string | null;
      /**
       * Value
       * @description Numeric value determining the security level hierarchy
       */
      value: number;
    };
    /**
     * SecurityLevelPublic
     * @description Complete security level information including relationships.
     */
    SecurityLevelPublic: {
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /** Description */
      description: string | null;
      /** Value */
      value: number;
    };
    /**
     * SecurityLevelSparse
     * @description Basic security level information.
     */
    SecurityLevelSparse: {
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /** Description */
      description: string | null;
      /** Value */
      value: number;
    };
    /** SemanticSearchRequest */
    SemanticSearchRequest: {
      /** Search String */
      search_string: string;
      /**
       * Num Chunks
       * @default 30
       */
      num_chunks?: number;
      /**
       * Autocut Cutoff
       * @description Experimental feature that tries to limit the amount of chunks to only the relevant ones, based on the score. Set to null (or omit completely) to not use this feature
       */
      autocut_cutoff?: number | null;
    };
    /** SemanticSearchResponse */
    SemanticSearchResponse: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Info Blob Id
       * Format: uuid
       */
      info_blob_id: string;
      /** Text */
      text: string;
      /** Score */
      score: number;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
    };
    /** ServiceCreatePublic */
    ServiceCreatePublic: {
      /** Output Format */
      output_format?: ("json" | "list" | "boolean") | null;
      /** Json Schema */
      json_schema?: Record<string, never> | null;
      /** Name */
      name: string;
      /** Prompt */
      prompt: string;
      /** @default {} */
      completion_model_kwargs?: components["schemas"]["ModelKwargs"] | null;
      /**
       * Groups
       * @default []
       */
      groups?: components["schemas"]["ModelId"][];
      completion_model: components["schemas"]["ModelId"];
    };
    /** ServiceOutput */
    ServiceOutput: {
      /** Output */
      output: Record<string, never> | unknown[] | string;
      /**
       * Files
       * @default []
       */
      files?: components["schemas"]["FilePublic"][];
    };
    /** ServicePublicWithUser */
    ServicePublicWithUser: {
      /**
       * Permissions
       * @default []
       */
      permissions?: components["schemas"]["ResourcePermission"][];
      /** Output Format */
      output_format?: ("json" | "list" | "boolean") | null;
      /** Json Schema */
      json_schema?: Record<string, never> | null;
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /** Prompt */
      prompt: string;
      completion_model_kwargs?: components["schemas"]["ModelKwargs"] | null;
      /** Space Id */
      space_id?: string | null;
      /** Groups */
      groups: components["schemas"]["GroupPublicBase"][];
      completion_model: components["schemas"]["CompletionModelPublic"];
      user: components["schemas"]["UserPublicBase"];
    };
    /** ServiceRun */
    ServiceRun: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Input */
      input: string;
      /** Output */
      output: Record<string, never> | unknown[] | string;
      completion_model: components["schemas"]["CompletionModelPublic"];
      /** References */
      references: components["schemas"]["InfoBlobPublic"][];
    };
    /** ServiceSparse */
    ServiceSparse: {
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Output Format */
      output_format?: ("json" | "list" | "boolean") | null;
      /** Json Schema */
      json_schema?: Record<string, never> | null;
      /** Name */
      name: string;
      /** Prompt */
      prompt: string;
      /** @default {} */
      completion_model_kwargs?: components["schemas"]["ModelKwargs"] | null;
      /**
       * Permissions
       * @default []
       */
      permissions?: components["schemas"]["ResourcePermission"][];
      /**
       * User Id
       * Format: uuid
       */
      user_id: string;
    };
    /** SessionFeedback */
    SessionFeedback: {
      /**
       * Value
       * @enum {integer}
       */
      value: -1 | 1;
      /** Text */
      text?: string | null;
    };
    /** SessionMetadata */
    SessionMetadata: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Assistant Id
       * Format: uuid
       */
      assistant_id: string;
    };
    /** SessionMetadataPublic */
    SessionMetadataPublic: {
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /** Name */
      name: string;
      /**
       * Id
       * Format: uuid
       */
      id: string;
    };
    /** SessionPublic */
    SessionPublic: {
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /** Name */
      name: string;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Messages
       * @default []
       */
      messages?: components["schemas"]["Message"][];
      feedback?: components["schemas"]["SessionFeedback"] | null;
    };
    /** SettingsPublic */
    SettingsPublic: {
      /**
       * Chatbot Widget
       * @default {}
       */
      chatbot_widget?: Record<string, never>;
    };
    /** SpaceDashboard */
    SpaceDashboard: {
      /**
       * Permissions
       * @default []
       */
      permissions?: components["schemas"]["ResourcePermission"][];
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /** Description */
      description: string | null;
      /** Personal */
      personal: boolean;
      security_level: components["schemas"]["SecurityLevelSparse"] | null;
      applications: components["schemas"]["Applications"];
    };
    /** SpaceMember */
    SpaceMember: {
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Email
       * Format: email
       */
      email: string;
      /** Username */
      username?: string | null;
      role: components["schemas"]["SpaceRoleValue"];
    };
    /** SpacePublic */
    SpacePublic: {
      /**
       * Permissions
       * @default []
       */
      permissions?: components["schemas"]["ResourcePermission"][];
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /** Description */
      description: string | null;
      /** Personal */
      personal: boolean;
      security_level: components["schemas"]["SecurityLevelSparse"] | null;
      applications: components["schemas"]["Applications"];
      /** Embedding Models */
      embedding_models: components["schemas"]["EmbeddingModelSparse"][];
      /** Completion Models */
      completion_models: components["schemas"]["CompletionModelSparse"][];
      knowledge: components["schemas"]["Knowledge"];
      members: components["schemas"]["PaginatedPermissions_SpaceMember_"];
      default_assistant: components["schemas"]["DefaultAssistant"];
      /** Available Roles */
      available_roles: components["schemas"]["SpaceRole"][];
    };
    /** SpaceRole */
    SpaceRole: {
      value: components["schemas"]["SpaceRoleValue"];
      /** Label */
      label: string;
    };
    /**
     * SpaceRoleValue
     * @enum {string}
     */
    SpaceRoleValue: "admin" | "editor" | "viewer";
    /** SpaceSparse */
    SpaceSparse: {
      /**
       * Permissions
       * @default []
       */
      permissions?: components["schemas"]["ResourcePermission"][];
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /** Description */
      description: string | null;
      /** Personal */
      personal: boolean;
      security_level: components["schemas"]["SecurityLevelSparse"] | null;
    };
    /**
     * SpaceUpdateDryRunRequest
     * @description Request to analyze the impact of updating a space's properties.
     */
    SpaceUpdateDryRunRequest: {
      /** Security Level Id */
      security_level_id: string | null;
    };
    /**
     * SpaceUpdateDryRunResponse
     * @description Response containing the impact analysis of updating a space's properties.
     */
    SpaceUpdateDryRunResponse: {
      /** Unavailable Completion Models */
      unavailable_completion_models: components["schemas"]["CompletionModelPublic"][];
      /** Unavailable Embedding Models */
      unavailable_embedding_models: components["schemas"]["EmbeddingModelPublic"][];
      current_security_level: components["schemas"]["SecurityLevelSparse"] | null;
      new_security_level: components["schemas"]["SecurityLevelSparse"] | null;
    };
    /**
     * Status
     * @enum {string}
     */
    Status: "in progress" | "queued" | "complete" | "failed" | "not found";
    /** StorageInfoModel */
    StorageInfoModel: {
      /** Count */
      count: number;
      /** Items */
      items: components["schemas"]["StorageSpaceInfoModel"][];
    };
    /** StorageModel */
    StorageModel: {
      /** Total Used */
      total_used: number;
      /** Personal Used */
      personal_used: number;
      /** Shared Used */
      shared_used: number;
      /** Limit */
      limit: number;
    };
    /** StorageSpaceInfoModel */
    StorageSpaceInfoModel: {
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Update At
       * Format: date-time
       */
      update_at: string;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /** Size */
      size: number;
      /** Members */
      members: components["schemas"]["StorageSpaceMemberModel"][];
    };
    /** StorageSpaceMemberModel */
    StorageSpaceMemberModel: {
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Email */
      email: string;
      /** Role */
      role: string;
    };
    /**
     * Task
     * @enum {string}
     */
    Task:
      | "upload_info_blob"
      | "transcription"
      | "crawl"
      | "embed_group"
      | "crawl_all_websites"
      | "run_app";
    /** TemplateCreate */
    TemplateCreate: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Additional Fields */
      additional_fields: components["schemas"]["AdditionalField"][] | null;
    };
    /** TemplateListPublic */
    TemplateListPublic: {
      /** Items */
      items: (
        | components["schemas"]["AppTemplatePublic"]
        | components["schemas"]["AssistantTemplatePublic"]
      )[];
      /** Count */
      count: number;
    };
    /** TemplateWizard */
    TemplateWizard: {
      /**
       * Required
       * @default false
       */
      required?: boolean;
      /** Title */
      title?: string | null;
      /** Description */
      description?: string | null;
    };
    /** TenantIntegration */
    TenantIntegration: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Enabled */
      enabled: boolean;
    };
    /** TenantIntegrationList */
    TenantIntegrationList: {
      /** Items */
      items: components["schemas"]["TenantIntegration"][];
      /** Count */
      count: number;
    };
    /** TenantPublic */
    TenantPublic: {
      /** Name */
      name: string;
      /** Display Name */
      display_name?: string | null;
      /**
       * Quota Limit
       * @description Size in bytes. Default is 10 GB
       * @default 10737418240
       */
      quota_limit?: number;
      /** Domain */
      domain?: string | null;
      /** Zitadel Org Id */
      zitadel_org_id?: string | null;
      /**
       * Provisioning
       * @default false
       */
      provisioning?: boolean;
      /** Privacy Policy */
      privacy_policy?: string | null;
    };
    /** ToolAssistant */
    ToolAssistant: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** At-Tag */
      "at-tag": string;
    };
    /** Tools */
    Tools: {
      /** Assistants */
      assistants: components["schemas"]["ToolAssistant"][];
    };
    /** TransferApplicationRequest */
    TransferApplicationRequest: {
      /**
       * Target Space Id
       * Format: uuid
       */
      target_space_id: string;
      /**
       * Move Resources
       * @default false
       */
      move_resources?: boolean;
    };
    /** TransferRequest */
    TransferRequest: {
      /**
       * Target Space Id
       * Format: uuid
       */
      target_space_id: string;
    };
    /**
     * UpdateInterval
     * @enum {string}
     */
    UpdateInterval: "never" | "weekly";
    /** UpdateSpaceMemberRequest */
    UpdateSpaceMemberRequest: {
      role: components["schemas"]["SpaceRoleValue"];
    };
    /** UseTools */
    UseTools: {
      /** Assistants */
      assistants: components["schemas"]["ModelId"][];
    };
    /** UserAddAdmin */
    UserAddAdmin: {
      /**
       * Email
       * Format: email
       */
      email: string;
      /** Username */
      username?: string | null;
      /** Password */
      password?: string | null;
      /**
       * Quota Limit
       * @description Size in bytes
       */
      quota_limit?: number | null;
      /**
       * Roles
       * @default []
       */
      roles?: components["schemas"]["ModelId"][];
      /**
       * Predefined Roles
       * @default []
       */
      predefined_roles?: components["schemas"]["ModelId"][];
    };
    /** UserAdminView */
    UserAdminView: {
      /**
       * Email
       * Format: email
       */
      email: string;
      /** Username */
      username?: string | null;
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Quota Used
       * @default 0
       */
      quota_used?: number;
      /** Used Tokens */
      used_tokens: number;
      /** Email Verified */
      email_verified: boolean;
      /** Quota Limit */
      quota_limit: number | null;
      /** Is Active */
      is_active: boolean;
      state: components["schemas"]["UserState"];
      /** Roles */
      roles: components["schemas"]["RolePublic"][];
      /** Predefined Roles */
      predefined_roles: components["schemas"]["PredefinedRolePublic"][];
      /** User Groups */
      user_groups: components["schemas"]["UserGroupRead"][];
    };
    /** UserCreatedAdminView */
    UserCreatedAdminView: {
      /**
       * Email
       * Format: email
       */
      email: string;
      /** Username */
      username?: string | null;
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Quota Used
       * @default 0
       */
      quota_used?: number;
      /** Used Tokens */
      used_tokens: number;
      /** Email Verified */
      email_verified: boolean;
      /** Quota Limit */
      quota_limit: number | null;
      /** Is Active */
      is_active: boolean;
      state: components["schemas"]["UserState"];
      /** Roles */
      roles: components["schemas"]["RolePublic"][];
      /** Predefined Roles */
      predefined_roles: components["schemas"]["PredefinedRolePublic"][];
      /** User Groups */
      user_groups: components["schemas"]["UserGroupRead"][];
      api_key: components["schemas"]["ApiKey"];
    };
    /** UserGroupCreateRequest */
    UserGroupCreateRequest: {
      /** Name */
      name: string;
    };
    /** UserGroupPublic */
    UserGroupPublic: {
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /**
       * Users
       * @default []
       */
      users?: components["schemas"]["UserPublicBase"][];
    };
    /** UserGroupRead */
    UserGroupRead: {
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
    };
    /** UserGroupUpdateRequest */
    UserGroupUpdateRequest: {
      /** Name */
      name?: string | null;
      /**
       * Users
       * @default []
       */
      users?: components["schemas"]["ModelId"][];
    };
    /** UserIntegration */
    UserIntegration: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Connected */
      connected: boolean;
    };
    /** UserIntegrationList */
    UserIntegrationList: {
      /** Items */
      items: components["schemas"]["UserIntegration"][];
      /** Count */
      count: number;
    };
    /** UserProvision */
    UserProvision: {
      /** Zitadel Token */
      zitadel_token: string;
    };
    /** UserPublic */
    UserPublic: {
      /**
       * Email
       * Format: email
       */
      email: string;
      /** Username */
      username?: string | null;
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Quota Used
       * @default 0
       */
      quota_used?: number;
      /** Truncated Api Key */
      truncated_api_key?: string | null;
      /** Quota Limit */
      quota_limit?: number | null;
      /** Roles */
      roles: components["schemas"]["RolePublic"][];
      /** Predefined Roles */
      predefined_roles: components["schemas"]["PredefinedRolePublic"][];
      /** User Groups */
      user_groups: components["schemas"]["UserGroupRead"][];
    };
    /** UserPublicBase */
    UserPublicBase: {
      /**
       * Email
       * Format: email
       */
      email: string;
      /** Username */
      username?: string | null;
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Quota Used
       * @default 0
       */
      quota_used?: number;
    };
    /** UserSparse */
    UserSparse: {
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Email
       * Format: email
       */
      email: string;
      /** Username */
      username?: string | null;
    };
    /**
     * UserState
     * @enum {string}
     */
    UserState: "invited" | "active" | "inactive" | "deleted";
    /** UserUpdatePublic */
    UserUpdatePublic: {
      /** Email */
      email?: string | null;
      /** Username */
      username?: string | null;
      /** Password */
      password?: string | null;
      /**
       * Quota Limit
       * @description Size in bytes
       */
      quota_limit?: number | null;
      /** Roles */
      roles?: components["schemas"]["ModelId"][] | null;
      /** Predefined Roles */
      predefined_roles?: components["schemas"]["ModelId"][];
      state?: components["schemas"]["UserState"] | null;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /** WebsiteCreateRequest */
    WebsiteCreateRequest: {
      /** Name */
      name?: string | null;
      /**
       * Url
       * Format: uri
       */
      url: string;
      /** Space Id */
      space_id?: string | null;
      /**
       * Download Files
       * @default false
       */
      download_files?: boolean;
      /** @default crawl */
      crawl_type?: components["schemas"]["CrawlType"];
      /** @default never */
      update_interval?: components["schemas"]["UpdateInterval"];
      embedding_model: components["schemas"]["ModelId"];
    };
    /** WebsiteMetadata */
    WebsiteMetadata: {
      /** Size */
      size: number;
    };
    /** WebsitePublic */
    WebsitePublic: {
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name?: string | null;
      /** Url */
      url: string;
      /** Space Id */
      space_id?: string | null;
      /**
       * Download Files
       * @default false
       */
      download_files?: boolean;
      /** @default crawl */
      crawl_type?: components["schemas"]["CrawlType"];
      /** @default never */
      update_interval?: components["schemas"]["UpdateInterval"];
      latest_crawl?: components["schemas"]["CrawlRunPublic"] | null;
      embedding_model?: components["schemas"]["EmbeddingModelPublicBase"] | null;
      metadata: components["schemas"]["WebsiteMetadata"];
    };
    /** WebsiteSparse */
    WebsiteSparse: {
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name?: string | null;
      /** Url */
      url: string;
      /** Space Id */
      space_id?: string | null;
      /**
       * Download Files
       * @default false
       */
      download_files?: boolean;
      /** @default crawl */
      crawl_type?: components["schemas"]["CrawlType"];
      /** @default never */
      update_interval?: components["schemas"]["UpdateInterval"];
      /**
       * Permissions
       * @default []
       */
      permissions?: components["schemas"]["ResourcePermission"][];
      latest_crawl?: components["schemas"]["CrawlRunSparse"] | null;
      /**
       * User Id
       * Format: uuid
       */
      user_id: string;
      embedding_model: components["schemas"]["IdAndName"];
      metadata: components["schemas"]["WebsiteMetadata"];
    };
    /**
     * WizardType
     * @enum {string}
     */
    WizardType: "attachments" | "groups";
    /** WsOutgoingWebSocketMessage */
    WsOutgoingWebSocketMessage: {
      type: components["schemas"]["WsOutgoingWebSocketMessage"]["$defs"]["OutGoingMessageType"];
      /** @default null */
      data?: components["schemas"]["WsOutgoingWebSocketMessage"]["$defs"]["MessagePayload"] | null;
      $defs: {
        /** MessagePayload */
        MessagePayload: Record<string, never>;
        /**
         * OutGoingMessageType
         * @enum {string}
         */
        OutGoingMessageType: "pong" | "app_run_updates";
      };
    };
    /** WsAppRunUpdate */
    WsAppRunUpdate: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      status: components["schemas"]["WsAppRunUpdate"]["$defs"]["Status"];
      /**
       * App Id
       * @default null
       */
      app_id?: string | null;
      /** @default null */
      space?: components["schemas"]["WsAppRunUpdate"]["$defs"]["Space"] | null;
      $defs: {
        /** Space */
        Space: {
          /**
           * Id
           * Format: uuid
           */
          id: string;
          /** Personal */
          personal: boolean;
        };
        /**
         * Status
         * @enum {string}
         */
        Status: "in progress" | "queued" | "complete" | "failed" | "not found";
      };
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /** Get Crawl Run */
  get_crawl_run_api_v1_crawl_runs__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CrawlRunPublic"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get App */
  get_app_api_v1_apps__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AppPublic"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete App */
  delete_app_api_v1_apps__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update App */
  update_app_api_v1_apps__id___patch: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PartialAppUpdateRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AppPublic"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get App Runs */
  get_app_runs_api_v1_apps__id__runs__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedResponse_AppRunSparse_"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Run App */
  run_app_api_v1_apps__id__runs__post: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RunAppRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      203: {
        content: {
          "application/json": components["schemas"]["AppRunPublic"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Prompts */
  get_prompts_api_v1_apps__id__prompts__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedResponse_PromptSparse_"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get App Run */
  get_app_run_api_v1_app_runs__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AppRunPublic"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete App Run */
  delete_app_run_api_v1_app_runs__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Login
   * @description OAuth2 Login
   */
  Login_api_v1_users_login_token__post: {
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": components["schemas"]["Body_Login_api_v1_users_login_token__post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AccessToken"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Login With Mobilityguard
   * @description OpenID Connect Login with mobilityguard.
   */
  login_with_mobilityguard_api_v1_users_login_openid_connect_mobilityguard__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["OpenIdConnectLogin"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AccessToken"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Tenant Users */
  get_tenant_users_api_v1_users__get: {
    parameters: {
      query?: {
        /** @description Email of user */
        email?: string | null;
        /** @description Users per page */
        limit?: number;
        /** @description Current cursor */
        cursor?: string | null;
        /** @description Show previous page */
        previous?: boolean | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CursorPaginatedResponse_UserSparse_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Current User */
  Get_current_user_api_v1_users_me__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserPublic"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
    };
  };
  /**
   * Generate Api Key
   * @description Generating a new api key will delete the old key.
   * Make sure to copy the key since it will only be showed once,
   * after which only the truncated key will be shown.
   */
  generate_api_key_api_v1_users_api_keys__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ApiKey"];
        };
      };
    };
  };
  /** Get Current User Tenant */
  Get_current_user_tenant_api_v1_users_tenant__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TenantPublic"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
    };
  };
  /** Invite User */
  invite_user_api_v1_users_admin_invite__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PropUserInvite"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["UserAdminView"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete User */
  delete_user_api_v1_users_admin__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update User */
  update_user_api_v1_users_admin__id___patch: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PartialPropUserUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserAdminView"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Provision User */
  provision_user_api_v1_users_provision__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserProvision"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Info Blob Ids
   * @description Returns a list of info-blobs.
   *
   * Does not return the text of each info-blob, 'text' will be null.
   */
  get_info_blob_ids_api_v1_info_blobs__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedResponse_InfoBlobPublicNoText_"];
        };
      };
    };
  };
  /** Get Info Blob */
  get_info_blob_api_v1_info_blobs__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["InfoBlobPublic"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Info Blob
   * @description Omitted fields are not updated.
   */
  update_info_blob_api_v1_info_blobs__id___post: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["InfoBlobUpdatePublic"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["InfoBlobPublic"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Info Blob
   * @description Returns the deleted object.
   */
  delete_info_blob_api_v1_info_blobs__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["InfoBlobPublic"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Groups */
  get_groups_api_v1_groups__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedResponse_GroupPublicWithMetadata_"];
        };
      };
    };
  };
  /**
   * Create Group
   * @deprecated
   * @description Valid values for `embedding_model` are the provided by `GET /api/v1/settings/models/`.
   * Use the `name` field of the response from this endpoint.
   */
  create_group_api_v1_groups__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateGroupRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GroupPublicWithMetadata"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Group By Id */
  get_group_by_id_api_v1_groups__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GroupPublicWithMetadata"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Group */
  update_group_api_v1_groups__id___post: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PartialGroupUpdatePublic"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GroupPublicWithMetadata"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Group By Id */
  delete_group_by_id_api_v1_groups__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DeleteGroupResponse"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Info Blobs */
  get_info_blobs_api_v1_groups__id__info_blobs__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedResponse_InfoBlobPublicNoText_"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Add Info Blobs
   * @description Maximum allowed simultaneous upload is 128.
   *
   * Will be embedded using the embedding model of the group.
   */
  add_info_blobs_api_v1_groups__id__info_blobs__post: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["InfoBlobUpsertRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedResponse_InfoBlobPublic_"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
      /** @description Service Unavailable */
      503: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
    };
  };
  /**
   * Upload File
   * @description Starts a job, use the job operations to keep track of this job
   */
  upload_file_api_v1_groups__id__info_blobs_upload__post: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_upload_file_api_v1_groups__id__info_blobs_upload__post"];
      };
    };
    responses: {
      /** @description Successful Response */
      202: {
        content: {
          "application/json": components["schemas"]["JobPublic"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Run Semantic Search */
  run_semantic_search_api_v1_groups__id__searches__post: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SemanticSearchRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedResponse_SemanticSearchResponse_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Transfer Group To Space */
  transfer_group_to_space_api_v1_groups__id__transfer__post: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Settings */
  get_settings_api_v1_settings__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SettingsPublic"];
        };
      };
    };
  };
  /**
   * Upsert Settings
   * @description Omitted fields are not updated.
   */
  upsert_settings_api_v1_settings__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SettingsPublic"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SettingsPublic"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Models
   * @description From the response:
   *     - use the `id` field as values for `completion_model`
   *     - use the `id` field as values for `embedding_model`
   *
   * in creating and updating `Assistants` and `Services`.
   */
  get_models_api_v1_settings_models__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GetModelsResponse"];
        };
      };
    };
  };
  /** Get Formats */
  get_formats_api_v1_settings_formats__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedResponse_str_"];
        };
      };
    };
  };
  /**
   * Get Assistants
   * @description Requires Admin permission if `for_tenant` is `true`.
   */
  get_assistants_api_v1_assistants__get: {
    parameters: {
      query?: {
        name?: string;
        for_tenant?: boolean;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedResponse_AssistantPublic_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Assistant
   * @deprecated
   */
  create_assistant_api_v1_assistants__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssistantCreatePublic"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AssistantPublic"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Assistant */
  get_assistant_api_v1_assistants__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AssistantPublic"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Assistant
   * @description Omitted fields are not updated
   */
  update_assistant_api_v1_assistants__id___post: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PartialAssistantUpdatePublic"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AssistantPublic"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Assistant */
  delete_assistant_api_v1_assistants__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Assistant Sessions */
  get_assistant_sessions_api_v1_assistants__id__sessions__get: {
    parameters: {
      query?: {
        limit?: number;
        cursor?: string;
        previous?: boolean;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CursorPaginatedResponse_SessionMetadataPublic_"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Ask Assistant
   * @description Streams the response as Server-Sent Events if stream == true
   */
  ask_assistant_api_v1_assistants__id__sessions__post: {
    parameters: {
      query?: {
        version?: number;
      };
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AskAssistant"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AskResponse"];
          "text/event-stream": {
            /**
             * Session Id
             * Format: uuid
             */
            session_id: string;
            /** Question */
            question: string;
            /** Files */
            files: components["schemas"]["FilePublic"][];
            /** Answer */
            answer: string;
            /** References */
            references: components["schemas"]["InfoBlobAskAssistantPublic"][];
            model?: components["schemas"]["CompletionModelPublic"] | null;
            tools: components["schemas"]["UseTools"];
            $defs: {
              /**
               * CompletionModelFamily
               * @enum {string}
               */
              CompletionModelFamily: "openai" | "mistral" | "vllm" | "claude" | "azure";
              /** CompletionModelPublic */
              CompletionModelPublic: {
                /** Created At */
                created_at?: string | null;
                /** Updated At */
                updated_at?: string | null;
                /**
                 * Id
                 * Format: uuid
                 */
                id: string;
                /** Name */
                name: string;
                /** Nickname */
                nickname: string;
                family: components["schemas"]["CompletionModelFamily"];
                /** Token Limit */
                token_limit: number;
                /** Is Deprecated */
                is_deprecated: boolean;
                /** Nr Billion Parameters */
                nr_billion_parameters?: number | null;
                /** Hf Link */
                hf_link?: string | null;
                stability: components["schemas"]["ModelStability"];
                hosting: components["schemas"]["ModelHostingLocation"];
                /** Open Source */
                open_source?: boolean | null;
                /** Description */
                description?: string | null;
                /** Deployment Name */
                deployment_name?: string | null;
                org?: components["schemas"]["Orgs"] | null;
                /** Vision */
                vision: boolean;
                /**
                 * Is Org Enabled
                 * @default false
                 */
                is_org_enabled?: boolean;
                /**
                 * Is Org Default
                 * @default false
                 */
                is_org_default?: boolean;
                /** Security Level Id */
                security_level_id?: string | null;
                /**
                 * Can Access
                 * @default false
                 */
                can_access?: boolean;
                /**
                 * Is Locked
                 * @default true
                 */
                is_locked?: boolean;
                security_level?: components["schemas"]["SecurityLevelPublic"] | null;
              };
              /** FilePublic */
              FilePublic: {
                /** Created At */
                created_at?: string | null;
                /** Updated At */
                updated_at?: string | null;
                /**
                 * Id
                 * Format: uuid
                 */
                id: string;
                /** Name */
                name: string;
                /** Mimetype */
                mimetype: string;
                /** Size */
                size: number;
              };
              /** InfoBlobAskAssistantPublic */
              InfoBlobAskAssistantPublic: {
                /** Created At */
                created_at?: string | null;
                /** Updated At */
                updated_at?: string | null;
                /**
                 * Id
                 * Format: uuid
                 */
                id: string;
                metadata: components["schemas"]["InfoBlobMetadata"];
                /** Group Id */
                group_id?: string | null;
                /** Website Id */
                website_id?: string | null;
                /** Score */
                score: number;
              };
              /** InfoBlobMetadata */
              InfoBlobMetadata: {
                /** Url */
                url?: string | null;
                /** Title */
                title?: string | null;
                /**
                 * Embedding Model Id
                 * Format: uuid
                 */
                embedding_model_id: string;
                /** Size */
                size: number;
              };
              /**
               * ModelHostingLocation
               * @enum {string}
               */
              ModelHostingLocation: "usa" | "eu" | "swe";
              /** ModelId */
              ModelId: {
                /**
                 * Id
                 * Format: uuid
                 */
                id: string;
              };
              /**
               * ModelStability
               * @enum {string}
               */
              ModelStability: "stable" | "experimental";
              /**
               * Orgs
               * @enum {string}
               */
              Orgs: "OpenAI" | "Meta" | "Microsoft" | "Anthropic";
              /**
               * SecurityLevelPublic
               * @description Complete security level information including relationships.
               */
              SecurityLevelPublic: {
                /** Created At */
                created_at?: string | null;
                /** Updated At */
                updated_at?: string | null;
                /**
                 * Id
                 * Format: uuid
                 */
                id: string;
                /** Name */
                name: string;
                /** Description */
                description: string | null;
                /** Value */
                value: number;
              };
              /** UseTools */
              UseTools: {
                /** Assistants */
                assistants: components["schemas"]["ModelId"][];
              };
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Assistant Session */
  get_assistant_session_api_v1_assistants__id__sessions__session_id___get: {
    parameters: {
      path: {
        id: string;
        session_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SessionPublic"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Ask Followup
   * @description Streams the response as Server-Sent Events if stream == true
   */
  ask_followup_api_v1_assistants__id__sessions__session_id___post: {
    parameters: {
      query?: {
        version?: number;
      };
      path: {
        id: string;
        session_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AskAssistant"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AskResponse"];
          "text/event-stream": {
            /**
             * Session Id
             * Format: uuid
             */
            session_id: string;
            /** Question */
            question: string;
            /** Files */
            files: components["schemas"]["FilePublic"][];
            /** Answer */
            answer: string;
            /** References */
            references: components["schemas"]["InfoBlobAskAssistantPublic"][];
            model?: components["schemas"]["CompletionModelPublic"] | null;
            tools: components["schemas"]["UseTools"];
            $defs: {
              /**
               * CompletionModelFamily
               * @enum {string}
               */
              CompletionModelFamily: "openai" | "mistral" | "vllm" | "claude" | "azure";
              /** CompletionModelPublic */
              CompletionModelPublic: {
                /** Created At */
                created_at?: string | null;
                /** Updated At */
                updated_at?: string | null;
                /**
                 * Id
                 * Format: uuid
                 */
                id: string;
                /** Name */
                name: string;
                /** Nickname */
                nickname: string;
                family: components["schemas"]["CompletionModelFamily"];
                /** Token Limit */
                token_limit: number;
                /** Is Deprecated */
                is_deprecated: boolean;
                /** Nr Billion Parameters */
                nr_billion_parameters?: number | null;
                /** Hf Link */
                hf_link?: string | null;
                stability: components["schemas"]["ModelStability"];
                hosting: components["schemas"]["ModelHostingLocation"];
                /** Open Source */
                open_source?: boolean | null;
                /** Description */
                description?: string | null;
                /** Deployment Name */
                deployment_name?: string | null;
                org?: components["schemas"]["Orgs"] | null;
                /** Vision */
                vision: boolean;
                /**
                 * Is Org Enabled
                 * @default false
                 */
                is_org_enabled?: boolean;
                /**
                 * Is Org Default
                 * @default false
                 */
                is_org_default?: boolean;
                /** Security Level Id */
                security_level_id?: string | null;
                /**
                 * Can Access
                 * @default false
                 */
                can_access?: boolean;
                /**
                 * Is Locked
                 * @default true
                 */
                is_locked?: boolean;
                security_level?: components["schemas"]["SecurityLevelPublic"] | null;
              };
              /** FilePublic */
              FilePublic: {
                /** Created At */
                created_at?: string | null;
                /** Updated At */
                updated_at?: string | null;
                /**
                 * Id
                 * Format: uuid
                 */
                id: string;
                /** Name */
                name: string;
                /** Mimetype */
                mimetype: string;
                /** Size */
                size: number;
              };
              /** InfoBlobAskAssistantPublic */
              InfoBlobAskAssistantPublic: {
                /** Created At */
                created_at?: string | null;
                /** Updated At */
                updated_at?: string | null;
                /**
                 * Id
                 * Format: uuid
                 */
                id: string;
                metadata: components["schemas"]["InfoBlobMetadata"];
                /** Group Id */
                group_id?: string | null;
                /** Website Id */
                website_id?: string | null;
                /** Score */
                score: number;
              };
              /** InfoBlobMetadata */
              InfoBlobMetadata: {
                /** Url */
                url?: string | null;
                /** Title */
                title?: string | null;
                /**
                 * Embedding Model Id
                 * Format: uuid
                 */
                embedding_model_id: string;
                /** Size */
                size: number;
              };
              /**
               * ModelHostingLocation
               * @enum {string}
               */
              ModelHostingLocation: "usa" | "eu" | "swe";
              /** ModelId */
              ModelId: {
                /**
                 * Id
                 * Format: uuid
                 */
                id: string;
              };
              /**
               * ModelStability
               * @enum {string}
               */
              ModelStability: "stable" | "experimental";
              /**
               * Orgs
               * @enum {string}
               */
              Orgs: "OpenAI" | "Meta" | "Microsoft" | "Anthropic";
              /**
               * SecurityLevelPublic
               * @description Complete security level information including relationships.
               */
              SecurityLevelPublic: {
                /** Created At */
                created_at?: string | null;
                /** Updated At */
                updated_at?: string | null;
                /**
                 * Id
                 * Format: uuid
                 */
                id: string;
                /** Name */
                name: string;
                /** Description */
                description: string | null;
                /** Value */
                value: number;
              };
              /** UseTools */
              UseTools: {
                /** Assistants */
                assistants: components["schemas"]["ModelId"][];
              };
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Assistant Session */
  delete_assistant_session_api_v1_assistants__id__sessions__session_id___delete: {
    parameters: {
      path: {
        id: string;
        session_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SessionPublic"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Leave Feedback */
  leave_feedback_api_v1_assistants__id__sessions__session_id__feedback__post: {
    parameters: {
      path: {
        id: string;
        session_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SessionFeedback"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SessionPublic"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Generate Read Only Assistant Key
   * @description Generates a read-only api key for this assistant.
   *
   * This api key can only be used on `POST /api/v1/assistants/{id}/sessions/`
   * and `POST /api/v1/assistants/{id}/sessions/{session_id}/`.
   */
  generate_read_only_assistant_key_api_v1_assistants__id__api_keys__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ApiKey"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Transfer Assistant To Space */
  transfer_assistant_to_space_api_v1_assistants__id__transfer__post: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferApplicationRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Services */
  get_services_api_v1_services__get: {
    parameters: {
      query?: {
        name?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedResponse_ServicePublicWithUser_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Service
   * @deprecated
   * @description Create a service.
   *
   * `json_schema` is required if `output_validation` is 'json'.
   *
   * Conversely, `json_schema` is not evaluated if `output_format` is not 'json'.
   *
   * if `output_format` is omitted, the output will not be formatted.
   */
  create_service_api_v1_services__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ServiceCreatePublic"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ServicePublicWithUser"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Service */
  get_service_api_v1_services__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ServicePublicWithUser"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Service
   * @description Omitted fields are not updated
   */
  update_service_api_v1_services__id___post: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PartialServiceUpdatePublic"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ServicePublicWithUser"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Service */
  delete_service_api_v1_services__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Service Runs */
  get_service_runs_api_v1_services__id__run__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedResponse_ServiceRun_"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Run Service
   * @description The schema of the output will be depending on the output validation of the service
   */
  run_service_api_v1_services__id__run__post: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RunService"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ServiceOutput"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Transfer Service To Space */
  transfer_service_to_space_api_v1_services__id__transfer__post: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferApplicationRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Logging Details */
  get_logging_details_api_v1_logging__message_id___get: {
    parameters: {
      path: {
        message_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["MessageLogging"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Counts
   * @description Total counts.
   */
  get_counts_api_v1_analysis_counts__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Counts"];
        };
      };
    };
  };
  /**
   * Get Metadata
   * @description Data for analytics
   */
  get_metadata_api_v1_analysis_metadata_statistics__get: {
    parameters: {
      query?: {
        start_date?: string;
        end_date?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["MetadataStatistics"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Most Recent Questions
   * @description Get all the questions asked to an assistant in the last `days_since` days.
   *
   * `days_since`: How long back in time to get the questions.
   *
   * `include_followups`: If not selected, only the first question of a session is returned.
   *     Order is by date ascending, but if followups are included they are grouped together
   *     with their original question.
   */
  get_most_recent_questions_api_v1_analysis_assistants__assistant_id___get: {
    parameters: {
      query?: {
        days_since?: number;
        from_date?: string | null;
        to_date?: string | null;
        include_followups?: boolean;
      };
      path: {
        assistant_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedResponse_Message_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Ask Question About Questions
   * @description Ask a question with the questions asked to an assistant in the last
   *   `days_since` days as the context.
   *
   * `days_since`: How long back in time to get the questions.
   *
   * `include_followups`: If not selected, only the first question of a session is returned.
   *     Order is by date ascending, but if followups are included they are grouped together
   *     with their original question.
   */
  ask_question_about_questions_api_v1_analysis_assistants__assistant_id___post: {
    parameters: {
      query?: {
        days_since?: number;
        from_date?: string | null;
        to_date?: string | null;
        include_followups?: boolean;
      };
      path: {
        assistant_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AskAnalysis"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Users
   * @deprecated
   */
  get_users_api_v1_admin_users__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedResponse_UserAdminView_"];
        };
      };
    };
  };
  /**
   * Register User
   * @deprecated
   */
  register_user_api_v1_admin_users__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserAddAdmin"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserCreatedAdminView"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update User
   * @deprecated
   * @description Omitted fields are not updated.
   */
  update_user_api_v1_admin_users__username___post: {
    parameters: {
      path: {
        username: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdatePublic"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserAdminView"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete User
   * @deprecated
   */
  delete_user_api_v1_admin_users__username__delete: {
    parameters: {
      path: {
        username: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DeleteResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Privacy Policy
   * @deprecated
   */
  update_privacy_policy_api_v1_admin_privacy_policy__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PrivacyPolicy"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TenantPublic"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Security Levels
   * @description List all security levels for the current tenant ordered by value.
   *
   * Returns:
   *     List of security levels ordered by value.
   *
   * Raises:
   *     403: If the user doesn't have permission to list security levels.
   */
  list_security_levels_api_v1_security_levels_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SecurityLevelPublic"][];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
    };
  };
  /**
   * Create Security Level
   * @description Create a new security level for the current tenant.
   *
   * Args:
   *     request: The security level creation request.
   *
   * Returns:
   *     The created security level.
   *
   * Raises:
   *     400: If the request is invalid.
   *     409: If a security level with the same name already exists for this tenant.
   */
  create_security_level_api_v1_security_levels_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SecurityLevelCreatePublic"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["SecurityLevelPublic"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Security Level
   * @description Get a security level by ID.
   *
   * Args:
   *     id: The ID of the security level.
   *
   * Returns:
   *     The security level.
   *
   * Raises:
   *     403: If the user doesn't have permission to view the security level.
   *     404: If the security level doesn't exist or belongs to a different tenant.
   */
  get_security_level_api_v1_security_levels__id__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SecurityLevelPublic"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Security Level
   * @description Delete a security level.
   *
   * Args:
   *     id: The ID of the security level to delete.
   *
   * Raises:
   *     403: If the user doesn't have permission to delete the security level.
   *     404: If the security level doesn't exist or belongs to a different tenant.
   *     409: If the security level is in use by any spaces or models.
   */
  delete_security_level_api_v1_security_levels__id__delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Security Level
   * @description Update a security level.
   *
   * Args:
   *     id: The ID of the security level to update.
   *     request: The update request.
   *
   * Returns:
   *     The updated security level.
   *
   * Raises:
   *     400: If the request is invalid.
   *     403: If the user doesn't have permission to update the security level.
   *     404: If the security level doesn't exist or belongs to a different tenant.
   *     409: If updating the name would create a duplicate within the tenant.
   */
  update_security_level_api_v1_security_levels__id__patch: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PartialSecurityLevelUpdatePublic"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SecurityLevelPublic"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Jobs */
  get_jobs_api_v1_jobs__get: {
    parameters: {
      query?: {
        include_completed?: boolean;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedResponse_JobPublic_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Job */
  get_job_api_v1_jobs__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["JobPublic"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get User Groups */
  get_user_groups_api_v1_user_groups__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedResponse_UserGroupPublic_"];
        };
      };
    };
  };
  /** Create User Group */
  create_user_group_api_v1_user_groups__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserGroupCreateRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserGroupPublic"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get User Group By Uuid */
  get_user_group_by_uuid_api_v1_user_groups__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserGroupPublic"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update User Group */
  update_user_group_api_v1_user_groups__id___post: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserGroupUpdateRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserGroupPublic"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete User Group By Uuid */
  delete_user_group_by_uuid_api_v1_user_groups__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserGroupPublic"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Add User To User Group */
  add_user_to_user_group_api_v1_user_groups__id__users__user_id___post: {
    parameters: {
      path: {
        id: string;
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserGroupPublic"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete User From User Group */
  delete_user_from_user_group_api_v1_user_groups__id__users__user_id___delete: {
    parameters: {
      path: {
        id: string;
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserGroupPublic"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Origins */
  get_origins_api_v1_allowed_origins__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedResponse_AllowedOriginPublic_"];
        };
      };
    };
  };
  /** Get Completion Models */
  get_completion_models_api_v1_completion_models__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedResponse_CompletionModelPublic_"];
        };
      };
    };
  };
  /** Update Completion Model */
  update_completion_model_api_v1_completion_models__id___post: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CompletionModelUpdateFlags"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CompletionModelPublic"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Embedding Models */
  get_embedding_models_api_v1_embedding_models__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedResponse_EmbeddingModelPublic_"];
        };
      };
    };
  };
  /** Enable Embedding Model */
  enable_embedding_model_api_v1_embedding_models__id___post: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EmbeddingModelUpdateFlags"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["EmbeddingModelPublic"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Files */
  get_files_api_v1_files__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedResponse_FilePublic_"];
        };
      };
    };
  };
  /** Upload File */
  upload_file_api_v1_files__post: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_upload_file_api_v1_files__post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FilePublic"];
        };
      };
      /** @description Request Entity Too Large */
      413: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Unsupported Media Type */
      415: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get File */
  get_file_api_v1_files__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FilePublic"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete File */
  delete_file_api_v1_files__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Limits */
  get_limits_api_v1_limits__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Limits"];
        };
      };
    };
  };
  /** Get Spaces */
  get_spaces_api_v1_spaces__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedResponse_SpaceSparse_"];
        };
      };
    };
  };
  /** Create Space */
  create_space_api_v1_spaces__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateSpaceRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["SpacePublic"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Space */
  get_space_api_v1_spaces__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SpacePublic"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Space */
  delete_space_api_v1_spaces__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Space */
  update_space_api_v1_spaces__id___patch: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PartialUpdateSpaceRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SpacePublic"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Space Applications */
  get_space_applications_api_v1_spaces__id__applications__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Applications"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Space Assistant */
  create_space_assistant_api_v1_spaces__id__applications_assistants__post: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateSpaceAssistantRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["AssistantPublic"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create App */
  create_app_api_v1_spaces__id__applications_apps__post: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateSpaceAppRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["AppPublic"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Space Services */
  create_space_services_api_v1_spaces__id__applications_services__post: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateSpaceServiceRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["CreateSpaceServiceResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Space Knowledge */
  get_space_knowledge_api_v1_spaces__id__knowledge__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Knowledge"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Space Groups */
  create_space_groups_api_v1_spaces__id__knowledge_groups__post: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateSpaceGroupsRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["CreateSpaceGroupsResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Space Websites */
  create_space_websites_api_v1_spaces__id__knowledge_websites__post: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateSpaceWebsitesRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["CreateSpaceWebsitesResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Add Space Member */
  add_space_member_api_v1_spaces__id__members__post: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddSpaceMemberRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SpaceMember"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Remove Space Member */
  remove_space_member_api_v1_spaces__id__members__user_id___delete: {
    parameters: {
      path: {
        id: string;
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Change Role Of Member */
  change_role_of_member_api_v1_spaces__id__members__user_id___patch: {
    parameters: {
      path: {
        id: string;
        user_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateSpaceMemberRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SpaceMember"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Personal Space */
  get_personal_space_api_v1_spaces_type_personal__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SpacePublic"];
        };
      };
    };
  };
  /**
   * Update Space Dryrun
   * @description Analyze the impact of updating a space's properties without actually applying the changes.
   * Currently supports:
   * - Security level changes: Shows which models would be affected
   */
  update_space_dryrun_api_v1_spaces__id__update_dryrun__post: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SpaceUpdateDryRunRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SpaceUpdateDryRunResponse"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Dashboard */
  get_dashboard_api_v1_dashboard__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Dashboard"];
        };
      };
    };
  };
  /** Get Websites */
  get_websites_api_v1_websites__get: {
    parameters: {
      query?: {
        for_tenant?: boolean;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedResponse_WebsitePublic_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Website
   * @deprecated
   * @description If `crawl_type` is `sitemap`, `allowed_path` and `download_files` must be unset.
   */
  create_website_api_v1_websites__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["WebsiteCreateRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["WebsitePublic"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Website */
  get_website_api_v1_websites__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["WebsitePublic"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Website */
  update_website_api_v1_websites__id___post: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PartialWebsiteUpdateRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["WebsitePublic"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Website */
  delete_website_api_v1_websites__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["WebsitePublic"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Run Crawl */
  run_crawl_api_v1_websites__id__run__post: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CrawlRunPublic"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Crawl Runs */
  get_crawl_runs_api_v1_websites__id__runs__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedResponse_CrawlRunPublic_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Transfer Website To Space */
  transfer_website_to_space_api_v1_websites__id__transfer__post: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Info Blobs */
  get_info_blobs_api_v1_websites__id__info_blobs__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedResponse_InfoBlobPublicNoText_"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Templates
   * @description Get all app templates
   */
  get_templates_api_v1_templates_apps__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AppTemplateListPublic"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
    };
  };
  /**
   * Get Templates
   * @description Get all assistant templates
   */
  get_templates_api_v1_templates_assistants__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AssistantTemplateListPublic"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
    };
  };
  /**
   * Get Templates
   * @description Get all types of templates
   */
  get_templates_api_v1_templates__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TemplateListPublic"];
        };
      };
    };
  };
  /** Get Storage */
  get_storage_api_v1_storage__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["StorageModel"];
        };
      };
    };
  };
  /** Get Spaces */
  get_spaces_api_v1_storage_spaces__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["StorageInfoModel"];
        };
      };
    };
  };
  /** Get Integrations */
  get_integrations_api_v1_integrations__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["IntegrationList"];
        };
      };
    };
  };
  /** Get Tenant Integrations */
  get_tenant_integrations_api_v1_integrations_tenant__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TenantIntegrationList"];
        };
      };
    };
  };
  /** Get User Integrations */
  get_user_integrations_api_v1_integrations_me__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserIntegrationList"];
        };
      };
    };
  };
  /** Get Version */
  get_version_version_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
}
